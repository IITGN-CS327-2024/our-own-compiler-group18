
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSPLUSMINUSMINUSnonassocEQEQNOTEQGTLTGTEQLTEQleftPLUSMINUSleftMULDIVREMADD ASSIGN BEGIN BOOL COLON COMMA CON DELETE DIV DOT ELIF ELSE END EQEQ EXCEPT FALSE FRONT FUNC GT GTEQ ID IF INT LIST LPAREN LSPAREN LT LTEQ MINUS MINUSMINUS MUL NOTEQ NUMBER PLUS PLUSPLUS REAR REM RETURN RPAREN RSPAREN SEMICOLON SIZE STR STRING SUBSTR TRUE TRY TUPLE VAR WHILE ZOUTstart : statement_liststatement_list : statement KA statement_list\n                      | emptyKA : SEMICOLON\n         | empty statement : declaration\n                 | assignment\n                 | if_stmnt\n                 | while_stmt\n                 | function_call\n                 | expression\n                 | compound_types\n                 | compound_type_access\n                 | try_except\n                 | printdeclaration : VAR type assignmentL : statement\n       | ID LPAREN data RPARENassignment :  ID ASSIGN Ltype : INT\n            | BOOL\n            | STRcompound_types : A ID ASSIGN LPAREN data RPARENA : TUPLE\n         | LISTdata : expression data\n            | COMMA data\n            | emptycompound_type_access : Z F \n                            | ID LSPAREN expression RSPARENZ : ID DOT F : CON LPAREN factor RPAREN\n         | FRONT\n         | ADD LPAREN factor RPAREN\n         | REAR\n         | SIZE\n         | DELETE\n         | SUBSTR LPAREN factor COMMA factor RPAREN\n         | emptyif_stmnt : IF LPAREN condition RPAREN  BEGIN  statement_list END TT :  ELIF LPAREN condition RPAREN BEGIN  statement_list END K\n         |  emptyK : ELSE BEGIN statement_list END \n         | emptywhile_stmt : WHILE LPAREN condition RPAREN BEGIN statement_list ENDfunction_call : FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list  RETURN data SEMICOLON ENDparameter_list : type ID parameter_list\n                      | COMMA parameter_list\n                      | emptycondition : expression  comparison_operator  expressioncomparison_operator : EQEQ \n                           | NOTEQ \n                           | LT \n                           | GT \n                           | LTEQ \n                           | GTEQ expression : expression binary_operator expression\n                  | termbinary_operator : PLUS \n                       | MINUS \n                       | MUL \n                       | DIV \n                       | REM term :  factor \n            | term unary_operator  unary_operator : PLUSPLUS \n                       | MINUSMINUS  factor :  ID \n               | NUMBER \n               | STRING\n               | TRUE\n               | FALSE \n               | LPAREN expression RPARENtry_except : TRY COLON x EXCEPT COLON xx : BEGIN statement_list ENDprint : ZOUT LPAREN y RPARENy : expression\n         | compound_type_accessempty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,48,51,54,55,56,58,60,62,63,64,66,69,70,71,73,74,75,79,93,113,125,126,129,130,137,139,140,141,143,144,146,153,156,157,159,162,],[-79,0,-1,-79,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,-79,-4,-5,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-2,-57,-16,-68,-19,-17,-73,-30,-76,-32,-34,-75,-18,-23,-74,-79,-45,-38,-40,-42,-46,-79,-41,-44,-43,]),'VAR':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[15,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,15,-4,-5,15,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,15,-30,-76,15,15,-32,-34,-75,-18,15,-23,-74,-79,-45,-38,-40,-42,-46,15,-79,-41,-44,15,-43,]),'ID':([0,3,5,6,7,8,9,10,11,12,13,14,16,18,20,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,54,55,56,58,60,62,63,64,66,68,70,71,73,74,75,79,83,84,85,87,92,93,95,96,97,98,99,100,101,104,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,146,147,148,153,154,156,157,159,160,162,],[16,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,51,53,-58,57,-79,-64,-24,-25,-69,-70,-71,-72,16,-4,-5,51,-59,-60,-61,-62,-63,72,-20,-21,-22,73,51,-31,51,-68,51,-65,-66,-67,-29,-33,-35,-36,-37,-39,91,-57,-16,-68,-19,-17,-73,51,51,51,16,51,-30,51,-51,-52,-53,-54,-55,-56,122,51,-76,51,51,16,16,-32,-34,51,-75,-18,16,-23,-74,-79,-45,-38,-40,-42,51,51,-46,16,-79,-41,-44,16,-43,]),'IF':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[17,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,17,-4,-5,17,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,17,-30,-76,17,17,-32,-34,-75,-18,17,-23,-74,-79,-45,-38,-40,-42,-46,17,-79,-41,-44,17,-43,]),'WHILE':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[19,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,19,-4,-5,19,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,19,-30,-76,19,19,-32,-34,-75,-18,19,-23,-74,-79,-45,-38,-40,-42,-46,19,-79,-41,-44,19,-43,]),'FUNC':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[20,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,20,-4,-5,20,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,20,-30,-76,20,20,-32,-34,-75,-18,20,-23,-74,-79,-45,-38,-40,-42,-46,20,-79,-41,-44,20,-43,]),'TRY':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[24,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,24,-4,-5,24,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,24,-30,-76,24,24,-32,-34,-75,-18,24,-23,-74,-79,-45,-38,-40,-42,-46,24,-79,-41,-44,24,-43,]),'ZOUT':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[25,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,25,-4,-5,25,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,25,-30,-76,25,25,-32,-34,-75,-18,25,-23,-74,-79,-45,-38,-40,-42,-46,25,-79,-41,-44,25,-43,]),'TUPLE':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[27,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,27,-4,-5,27,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,27,-30,-76,27,27,-32,-34,-75,-18,27,-23,-74,-79,-45,-38,-40,-42,-46,27,-79,-41,-44,27,-43,]),'LIST':([0,3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,46,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,87,93,113,118,120,125,126,129,130,135,137,139,140,141,143,144,146,153,154,156,157,159,160,162,],[28,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,28,-4,-5,28,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,28,-30,-76,28,28,-32,-34,-75,-18,28,-23,-74,-79,-45,-38,-40,-42,-46,28,-79,-41,-44,28,-43,]),'NUMBER':([0,3,5,6,7,8,9,10,11,12,13,14,16,18,21,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,51,52,54,55,56,58,60,62,63,64,66,68,70,71,73,74,75,79,83,84,85,87,92,93,95,96,97,98,99,100,101,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,146,147,148,153,154,156,157,159,160,162,],[29,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,29,-58,-79,-64,-69,-70,-71,-72,29,-4,-5,29,-59,-60,-61,-62,-63,29,29,-31,29,-68,29,-65,-66,-67,-29,-33,-35,-36,-37,-39,29,-57,-16,-68,-19,-17,-73,29,29,29,29,29,-30,29,-51,-52,-53,-54,-55,-56,29,-76,29,29,29,29,-32,-34,29,-75,-18,29,-23,-74,-79,-45,-38,-40,-42,29,29,-46,29,-79,-41,-44,29,-43,]),'STRING':([0,3,5,6,7,8,9,10,11,12,13,14,16,18,21,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,51,52,54,55,56,58,60,62,63,64,66,68,70,71,73,74,75,79,83,84,85,87,92,93,95,96,97,98,99,100,101,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,146,147,148,153,154,156,157,159,160,162,],[30,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,30,-58,-79,-64,-69,-70,-71,-72,30,-4,-5,30,-59,-60,-61,-62,-63,30,30,-31,30,-68,30,-65,-66,-67,-29,-33,-35,-36,-37,-39,30,-57,-16,-68,-19,-17,-73,30,30,30,30,30,-30,30,-51,-52,-53,-54,-55,-56,30,-76,30,30,30,30,-32,-34,30,-75,-18,30,-23,-74,-79,-45,-38,-40,-42,30,30,-46,30,-79,-41,-44,30,-43,]),'TRUE':([0,3,5,6,7,8,9,10,11,12,13,14,16,18,21,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,51,52,54,55,56,58,60,62,63,64,66,68,70,71,73,74,75,79,83,84,85,87,92,93,95,96,97,98,99,100,101,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,146,147,148,153,154,156,157,159,160,162,],[31,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,31,-58,-79,-64,-69,-70,-71,-72,31,-4,-5,31,-59,-60,-61,-62,-63,31,31,-31,31,-68,31,-65,-66,-67,-29,-33,-35,-36,-37,-39,31,-57,-16,-68,-19,-17,-73,31,31,31,31,31,-30,31,-51,-52,-53,-54,-55,-56,31,-76,31,31,31,31,-32,-34,31,-75,-18,31,-23,-74,-79,-45,-38,-40,-42,31,31,-46,31,-79,-41,-44,31,-43,]),'FALSE':([0,3,5,6,7,8,9,10,11,12,13,14,16,18,21,23,26,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,51,52,54,55,56,58,60,62,63,64,66,68,70,71,73,74,75,79,83,84,85,87,92,93,95,96,97,98,99,100,101,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,146,147,148,153,154,156,157,159,160,162,],[32,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,32,-58,-79,-64,-69,-70,-71,-72,32,-4,-5,32,-59,-60,-61,-62,-63,32,32,-31,32,-68,32,-65,-66,-67,-29,-33,-35,-36,-37,-39,32,-57,-16,-68,-19,-17,-73,32,32,32,32,32,-30,32,-51,-52,-53,-54,-55,-56,32,-76,32,32,32,32,-32,-34,32,-75,-18,32,-23,-74,-79,-45,-38,-40,-42,32,32,-46,32,-79,-41,-44,32,-43,]),'LPAREN':([0,3,5,6,7,8,9,10,11,12,13,14,16,17,18,19,21,23,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,68,70,71,73,74,75,79,82,83,84,85,87,92,93,95,96,97,98,99,100,101,107,113,115,116,118,120,125,126,127,129,130,135,137,139,140,141,143,144,145,146,147,148,153,154,156,157,159,160,162,],[18,-79,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,49,18,52,-58,-79,68,-64,-69,-70,-71,-72,18,-4,-5,18,-59,-60,-61,-62,-63,18,18,-31,18,-68,18,81,-65,-66,-67,-29,83,-33,84,-35,-36,-37,85,-39,18,-57,-16,92,-19,-17,-73,107,18,18,18,18,18,-30,18,-51,-52,-53,-54,-55,-56,18,-76,18,18,18,18,-32,-34,18,-75,-18,18,-23,-74,-79,-45,-38,-40,148,-42,18,18,-46,18,-79,-41,-44,18,-43,]),'SEMICOLON':([3,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,48,51,54,55,56,58,60,62,63,64,66,70,71,73,74,75,79,93,113,115,116,117,125,126,129,130,131,132,137,139,140,141,143,144,146,147,149,153,156,157,159,162,],[34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,-16,-68,-19,-17,-73,-30,-76,-79,-79,-28,-32,-34,-75,-18,-26,-27,-23,-74,-79,-45,-38,-40,-42,-79,151,-46,-79,-41,-44,-43,]),'END':([3,4,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,48,51,54,55,56,58,60,62,63,64,66,69,70,71,73,74,75,79,87,93,112,113,118,120,125,126,129,130,133,134,137,139,140,141,143,144,146,151,153,154,155,156,157,159,160,161,162,],[-79,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,-79,-4,-5,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-2,-57,-16,-68,-19,-17,-73,-79,-30,129,-76,-79,-79,-32,-34,-75,-18,140,141,-23,-74,-79,-45,-38,-40,-42,153,-46,-79,156,-79,-41,-44,-79,162,-43,]),'RETURN':([3,4,5,6,7,8,9,10,11,12,13,14,16,21,23,26,29,30,31,32,33,34,35,48,51,54,55,56,58,60,62,63,64,66,69,70,71,73,74,75,79,93,113,125,126,129,130,135,137,139,140,141,142,143,144,146,153,156,157,159,162,],[-79,-3,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-68,-58,-79,-64,-69,-70,-71,-72,-79,-4,-5,-31,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-2,-57,-16,-68,-19,-17,-73,-30,-76,-32,-34,-75,-18,-79,-23,-74,-79,-45,147,-38,-40,-42,-46,-79,-41,-44,-43,]),'PLUS':([10,16,21,26,29,30,31,32,50,51,54,55,56,70,73,76,78,79,89,91,115,119,],[37,-68,-58,-64,-69,-70,-71,-72,37,-68,-65,-66,-67,37,-68,37,37,-73,37,-68,37,37,]),'MINUS':([10,16,21,26,29,30,31,32,50,51,54,55,56,70,73,76,78,79,89,91,115,119,],[38,-68,-58,-64,-69,-70,-71,-72,38,-68,-65,-66,-67,38,-68,38,38,-73,38,-68,38,38,]),'MUL':([10,16,21,26,29,30,31,32,50,51,54,55,56,70,73,76,78,79,89,91,115,119,],[39,-68,-58,-64,-69,-70,-71,-72,39,-68,-65,-66,-67,39,-68,39,39,-73,39,-68,39,39,]),'DIV':([10,16,21,26,29,30,31,32,50,51,54,55,56,70,73,76,78,79,89,91,115,119,],[40,-68,-58,-64,-69,-70,-71,-72,40,-68,-65,-66,-67,40,-68,40,40,-73,40,-68,40,40,]),'REM':([10,16,21,26,29,30,31,32,50,51,54,55,56,70,73,76,78,79,89,91,115,119,],[41,-68,-58,-64,-69,-70,-71,-72,41,-68,-65,-66,-67,41,-68,41,41,-73,41,-68,41,41,]),'INT':([15,81,105,122,],[43,43,43,43,]),'BOOL':([15,81,105,122,],[44,44,44,44,]),'STR':([15,81,105,122,],[45,45,45,45,]),'ASSIGN':([16,57,72,73,],[46,82,46,46,]),'LSPAREN':([16,73,91,],[47,47,47,]),'DOT':([16,73,91,],[48,48,48,]),'PLUSPLUS':([16,21,26,29,30,31,32,51,54,55,56,73,79,91,],[-68,55,-64,-69,-70,-71,-72,-68,-65,-66,-67,-68,-73,-68,]),'MINUSMINUS':([16,21,26,29,30,31,32,51,54,55,56,73,79,91,],[-68,56,-64,-69,-70,-71,-72,-68,-65,-66,-67,-68,-73,-68,]),'RPAREN':([21,23,26,29,30,31,32,48,50,51,54,55,56,58,60,62,63,64,66,70,77,79,80,81,88,89,90,91,92,93,103,105,106,107,108,109,114,115,116,117,119,122,123,124,125,126,131,132,136,138,143,150,],[-58,-79,-64,-69,-70,-71,-72,-31,79,-68,-65,-66,-67,-29,-33,-35,-36,-37,-39,-57,94,-73,102,-79,113,-77,-78,-68,-79,-30,121,-79,-49,-79,125,126,130,-79,-79,-28,-50,-79,-48,137,-32,-34,-26,-27,-47,143,-38,152,]),'RSPAREN':([21,26,29,30,31,32,51,54,55,56,70,76,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,93,-73,]),'EQEQ':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,96,-73,]),'NOTEQ':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,97,-73,]),'LT':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,98,-73,]),'GT':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,99,-73,]),'LTEQ':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,100,-73,]),'GTEQ':([21,26,29,30,31,32,51,54,55,56,70,78,79,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,101,-73,]),'COMMA':([21,26,29,30,31,32,51,54,55,56,70,79,81,92,105,107,110,115,116,122,147,],[-58,-64,-69,-70,-71,-72,-68,-65,-66,-67,-57,-73,105,116,105,116,127,116,116,105,116,]),'CON':([23,48,],[59,-31,]),'FRONT':([23,48,],[60,-31,]),'ADD':([23,48,],[61,-31,]),'REAR':([23,48,],[62,-31,]),'SIZE':([23,48,],[63,-31,]),'DELETE':([23,48,],[64,-31,]),'SUBSTR':([23,48,],[65,-31,]),'COLON':([24,111,],[67,128,]),'BEGIN':([67,94,102,121,128,152,158,],[87,118,120,135,87,154,160,]),'EXCEPT':([86,129,],[111,-75,]),'ELIF':([140,],[145,]),'ELSE':([156,],[158,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statement_list':([0,33,87,118,120,135,154,160,],[2,69,112,133,134,142,155,161,]),'statement':([0,33,46,87,118,120,135,154,160,],[3,3,75,3,3,3,3,3,3,]),'empty':([0,3,23,33,81,87,92,105,107,115,116,118,120,122,135,140,147,154,156,160,],[4,35,66,4,106,4,117,106,117,117,117,4,4,106,4,146,117,4,159,4,]),'declaration':([0,33,46,87,118,120,135,154,160,],[5,5,5,5,5,5,5,5,5,]),'assignment':([0,33,42,46,87,118,120,135,154,160,],[6,6,71,6,6,6,6,6,6,6,]),'if_stmnt':([0,33,46,87,118,120,135,154,160,],[7,7,7,7,7,7,7,7,7,]),'while_stmt':([0,33,46,87,118,120,135,154,160,],[8,8,8,8,8,8,8,8,8,]),'function_call':([0,33,46,87,118,120,135,154,160,],[9,9,9,9,9,9,9,9,9,]),'expression':([0,18,33,36,46,47,49,52,68,87,92,95,107,115,116,118,120,135,147,148,154,160,],[10,50,10,70,10,76,78,78,89,10,115,119,115,115,115,10,10,10,115,78,10,10,]),'compound_types':([0,33,46,87,118,120,135,154,160,],[11,11,11,11,11,11,11,11,11,]),'compound_type_access':([0,33,46,68,87,118,120,135,154,160,],[12,12,12,90,12,12,12,12,12,12,]),'try_except':([0,33,46,87,118,120,135,154,160,],[13,13,13,13,13,13,13,13,13,]),'print':([0,33,46,87,118,120,135,154,160,],[14,14,14,14,14,14,14,14,14,]),'term':([0,18,33,36,46,47,49,52,68,87,92,95,107,115,116,118,120,135,147,148,154,160,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'A':([0,33,46,87,118,120,135,154,160,],[22,22,22,22,22,22,22,22,22,]),'Z':([0,33,46,68,87,118,120,135,154,160,],[23,23,23,23,23,23,23,23,23,23,]),'factor':([0,18,33,36,46,47,49,52,68,83,84,85,87,92,95,107,115,116,118,120,127,135,147,148,154,160,],[26,26,26,26,26,26,26,26,26,108,109,110,26,26,26,26,26,26,26,26,138,26,26,26,26,26,]),'KA':([3,],[33,]),'binary_operator':([10,50,70,76,78,89,115,119,],[36,36,36,36,36,36,36,36,]),'type':([15,81,105,122,],[42,104,104,104,]),'unary_operator':([21,],[54,]),'F':([23,],[58,]),'L':([46,],[74,]),'condition':([49,52,148,],[77,80,150,]),'x':([67,128,],[86,139,]),'y':([68,],[88,]),'comparison_operator':([78,],[95,]),'parameter_list':([81,105,122,],[103,123,136,]),'data':([92,107,115,116,147,],[114,124,131,132,149,]),'T':([140,],[144,]),'K':([156,],[157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statement_list','start',1,'p_start','parser_checker.py',151),
  ('statement_list -> statement KA statement_list','statement_list',3,'p_statement_list','parser_checker.py',156),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_checker.py',157),
  ('KA -> SEMICOLON','KA',1,'p_KA','parser_checker.py',161),
  ('KA -> empty','KA',1,'p_KA','parser_checker.py',162),
  ('statement -> declaration','statement',1,'p_statement','parser_checker.py',166),
  ('statement -> assignment','statement',1,'p_statement','parser_checker.py',167),
  ('statement -> if_stmnt','statement',1,'p_statement','parser_checker.py',168),
  ('statement -> while_stmt','statement',1,'p_statement','parser_checker.py',169),
  ('statement -> function_call','statement',1,'p_statement','parser_checker.py',170),
  ('statement -> expression','statement',1,'p_statement','parser_checker.py',171),
  ('statement -> compound_types','statement',1,'p_statement','parser_checker.py',172),
  ('statement -> compound_type_access','statement',1,'p_statement','parser_checker.py',173),
  ('statement -> try_except','statement',1,'p_statement','parser_checker.py',174),
  ('statement -> print','statement',1,'p_statement','parser_checker.py',175),
  ('declaration -> VAR type assignment','declaration',3,'p_declaration','parser_checker.py',180),
  ('L -> statement','L',1,'p_L','parser_checker.py',184),
  ('L -> ID LPAREN data RPAREN','L',4,'p_L','parser_checker.py',185),
  ('assignment -> ID ASSIGN L','assignment',3,'p_assignment','parser_checker.py',188),
  ('type -> INT','type',1,'p_type','parser_checker.py',192),
  ('type -> BOOL','type',1,'p_type','parser_checker.py',193),
  ('type -> STR','type',1,'p_type','parser_checker.py',194),
  ('compound_types -> A ID ASSIGN LPAREN data RPAREN','compound_types',6,'p_compound_types','parser_checker.py',199),
  ('A -> TUPLE','A',1,'p_A','parser_checker.py',204),
  ('A -> LIST','A',1,'p_A','parser_checker.py',205),
  ('data -> expression data','data',2,'p_data','parser_checker.py',209),
  ('data -> COMMA data','data',2,'p_data','parser_checker.py',210),
  ('data -> empty','data',1,'p_data','parser_checker.py',211),
  ('compound_type_access -> Z F','compound_type_access',2,'p_compound_type_access','parser_checker.py',214),
  ('compound_type_access -> ID LSPAREN expression RSPAREN','compound_type_access',4,'p_compound_type_access','parser_checker.py',215),
  ('Z -> ID DOT','Z',2,'p_Z','parser_checker.py',219),
  ('F -> CON LPAREN factor RPAREN','F',4,'p_F','parser_checker.py',223),
  ('F -> FRONT','F',1,'p_F','parser_checker.py',224),
  ('F -> ADD LPAREN factor RPAREN','F',4,'p_F','parser_checker.py',225),
  ('F -> REAR','F',1,'p_F','parser_checker.py',226),
  ('F -> SIZE','F',1,'p_F','parser_checker.py',227),
  ('F -> DELETE','F',1,'p_F','parser_checker.py',228),
  ('F -> SUBSTR LPAREN factor COMMA factor RPAREN','F',6,'p_F','parser_checker.py',229),
  ('F -> empty','F',1,'p_F','parser_checker.py',230),
  ('if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T','if_stmnt',8,'p_if_stmnt','parser_checker.py',234),
  ('T -> ELIF LPAREN condition RPAREN BEGIN statement_list END K','T',8,'p_T','parser_checker.py',238),
  ('T -> empty','T',1,'p_T','parser_checker.py',239),
  ('K -> ELSE BEGIN statement_list END','K',4,'p_K','parser_checker.py',243),
  ('K -> empty','K',1,'p_K','parser_checker.py',244),
  ('while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END','while_stmt',7,'p_while_stmt','parser_checker.py',248),
  ('function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END','function_call',11,'p_function_call','parser_checker.py',252),
  ('parameter_list -> type ID parameter_list','parameter_list',3,'p_parameter_list','parser_checker.py',255),
  ('parameter_list -> COMMA parameter_list','parameter_list',2,'p_parameter_list','parser_checker.py',256),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','parser_checker.py',257),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','parser_checker.py',260),
  ('comparison_operator -> EQEQ','comparison_operator',1,'p_comparison_operator','parser_checker.py',264),
  ('comparison_operator -> NOTEQ','comparison_operator',1,'p_comparison_operator','parser_checker.py',265),
  ('comparison_operator -> LT','comparison_operator',1,'p_comparison_operator','parser_checker.py',266),
  ('comparison_operator -> GT','comparison_operator',1,'p_comparison_operator','parser_checker.py',267),
  ('comparison_operator -> LTEQ','comparison_operator',1,'p_comparison_operator','parser_checker.py',268),
  ('comparison_operator -> GTEQ','comparison_operator',1,'p_comparison_operator','parser_checker.py',269),
  ('expression -> expression binary_operator expression','expression',3,'p_expression','parser_checker.py',273),
  ('expression -> term','expression',1,'p_expression','parser_checker.py',274),
  ('binary_operator -> PLUS','binary_operator',1,'p_binary_operator','parser_checker.py',278),
  ('binary_operator -> MINUS','binary_operator',1,'p_binary_operator','parser_checker.py',279),
  ('binary_operator -> MUL','binary_operator',1,'p_binary_operator','parser_checker.py',280),
  ('binary_operator -> DIV','binary_operator',1,'p_binary_operator','parser_checker.py',281),
  ('binary_operator -> REM','binary_operator',1,'p_binary_operator','parser_checker.py',282),
  ('term -> factor','term',1,'p_term','parser_checker.py',286),
  ('term -> term unary_operator','term',2,'p_term','parser_checker.py',287),
  ('unary_operator -> PLUSPLUS','unary_operator',1,'p_unary_operator','parser_checker.py',291),
  ('unary_operator -> MINUSMINUS','unary_operator',1,'p_unary_operator','parser_checker.py',292),
  ('factor -> ID','factor',1,'p_factor','parser_checker.py',296),
  ('factor -> NUMBER','factor',1,'p_factor','parser_checker.py',297),
  ('factor -> STRING','factor',1,'p_factor','parser_checker.py',298),
  ('factor -> TRUE','factor',1,'p_factor','parser_checker.py',299),
  ('factor -> FALSE','factor',1,'p_factor','parser_checker.py',300),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser_checker.py',301),
  ('try_except -> TRY COLON x EXCEPT COLON x','try_except',6,'p_try_except','parser_checker.py',305),
  ('x -> BEGIN statement_list END','x',3,'p_x','parser_checker.py',309),
  ('print -> ZOUT LPAREN y RPAREN','print',4,'p_print','parser_checker.py',313),
  ('y -> expression','y',1,'p_y','parser_checker.py',317),
  ('y -> compound_type_access','y',1,'p_y','parser_checker.py',318),
  ('empty -> <empty>','empty',0,'p_empty','parser_checker.py',322),
]
