
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSPLUSMINUSMINUSnonassocEQEQNOTEQGTLTGTEQLTEQleftPLUSMINUSleftMULDIVREMASSIGN BEGIN BOOL COMMA CON DELETE DIV DOT ELIF ELSE END EQEQ EXCEPT FALSE FRONT FUNC GT GTEQ ID IF INT LIST LPAREN LSPAREN LT LTEQ MINUS MINUSMINUS MUL NOTEQ NUMBER PLUS PLUSPLUS REAR REM RETURN RPAREN RSPAREN SEMICOLON SIZE STR STRING SUBSTR TRUE TRY TUPLE VAR WHILE ZOUTstart : statement_liststatement_list : statement SEMICOLON statement_list\n                      | emptystatement : declaration\n                 | assignment\n                 | if_stmnt\n                 | while_stmt\n                 | function_call\n                 | compound_types\n                 | compound_type_access\n                 | try_except\n                 | printdeclaration : VAR type ID ASSIGN LL : expression\n         | compound_type_accessassignment :  ID ASSIGN expressiontype : INT\n            | BOOL\n            | STRcompound_types : A ID ASSIGN NA : TUPLE\n         | LISTN : LPAREN data RPAREN\n         | LSPAREN data RSPARENdata : factor PP : COMMA data P\n         | emptycompound_type_access : Z F \n                            | ID LSPAREN expression RSPARENZ : ID DOT F : CON LPAREN factor RPAREN\n         | FRONT\n         | REAR\n         | SIZE\n         | DELETE\n         | SUBSTR LPAREN factor COMMA factor RPAREN\n         | emptyif_stmnt : IF LPAREN condition RPAREN  BEGIN  statement_list END TT :  ELIF LPAREN condition RPAREN BEGIN  statement_list END K\n         |  emptyK : ELSE BEGIN statement_list END \n         | emptywhile_stmt : WHILE LPAREN condition RPAREN BEGIN statement_list ENDfunction_call : FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list  RETURN ID SEMICOLON ENDparameter_list : type ID M M : COMMA parameter_list \n         | emptycondition : expression  comparison_operator  expressioncomparison_operator : EQEQ \n                           | NOTEQ \n                           | LT \n                           | GT \n                           | LTEQ \n                           | GTEQ expression :  D term  D : expression binary_operator \n         | emptybinary_operator : PLUS \n                       | MINUS \n                       | MUL \n                       | DIV \n                       | REM term :  factor \n            | term unary_operator factor  unary_operator : PLUSPLUS \n                       | MINUSMINUS  factor :  ID \n               | NUMBER \n               | STRING\n               | TRUE\n               | FALSE \n               | LPAREN expression RPAREN try_except : TRY x EXCEPT xx : BEGIN statement_list ENDprint : ZOUT LPAREN y RPARENy : NUMBER \n         | STRING \n         | ID\n         | compound_type_accessempty : '
    
_lr_action_items = {'$end':([0,1,2,4,25,48,],[-80,0,-1,-3,-80,-2,]),'VAR':([0,25,46,111,113,125,152,158,],[14,14,14,14,14,14,14,14,]),'ID':([0,18,19,23,24,25,26,27,28,29,30,31,33,34,46,47,51,52,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,94,96,97,107,108,109,111,113,120,125,131,144,146,152,158,],[15,35,36,-21,-22,15,49,-17,-18,-19,-80,-80,-80,-80,15,66,77,-57,77,77,103,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,115,77,77,77,-65,-66,15,15,77,15,77,147,-80,15,15,]),'IF':([0,25,46,111,113,125,152,158,],[16,16,16,16,16,16,16,16,]),'WHILE':([0,25,46,111,113,125,152,158,],[17,17,17,17,17,17,17,17,]),'FUNC':([0,25,46,111,113,125,152,158,],[18,18,18,18,18,18,18,18,]),'TRY':([0,25,46,111,113,125,152,158,],[21,21,21,21,21,21,21,21,]),'ZOUT':([0,25,46,111,113,125,152,158,],[22,22,22,22,22,22,22,22,]),'TUPLE':([0,25,46,111,113,125,152,158,],[23,23,23,23,23,23,23,23,]),'LIST':([0,25,46,111,113,125,152,158,],[24,24,24,24,24,24,24,24,]),'SEMICOLON':([3,5,6,7,8,9,10,11,12,13,20,32,37,39,40,41,42,44,50,75,76,77,78,79,80,81,83,95,100,101,102,104,105,106,119,121,122,129,133,135,136,140,141,143,147,151,154,155,157,160,],[25,-4,-5,-6,-7,-8,-9,-10,-11,-12,-80,-30,-28,-32,-33,-34,-35,-37,-16,-55,-63,-67,-68,-69,-70,-71,-29,-20,-73,-74,-75,-13,-14,-15,-31,-64,-72,-23,-24,-80,-43,-36,-38,-40,149,-44,-80,-39,-42,-41,]),'END':([4,25,46,48,62,111,113,123,124,149,152,153,158,159,],[-3,-80,-80,-2,101,-80,-80,135,136,151,-80,154,-80,160,]),'RETURN':([4,25,48,125,137,],[-3,-80,-2,-80,144,]),'INT':([14,57,127,],[27,27,27,]),'BOOL':([14,57,127,],[28,28,28,]),'STR':([14,57,127,],[29,29,29,]),'ASSIGN':([15,36,49,],[30,58,68,]),'LSPAREN':([15,58,66,103,],[31,97,31,31,]),'DOT':([15,66,103,],[32,32,32,]),'LPAREN':([16,17,22,30,31,33,34,35,38,43,51,52,58,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,96,97,107,108,109,120,131,142,146,],[33,34,47,-80,-80,-80,-80,57,59,60,82,-57,96,82,82,-80,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,82,82,82,-65,-66,82,82,146,-80,]),'CON':([20,32,],[38,-30,]),'FRONT':([20,32,],[39,-30,]),'REAR':([20,32,],[40,-30,]),'SIZE':([20,32,],[41,-30,]),'DELETE':([20,32,],[42,-30,]),'SUBSTR':([20,32,],[43,-30,]),'RPAREN':([20,32,37,39,40,41,42,44,54,56,63,64,65,66,67,75,76,77,78,79,80,81,83,93,98,110,112,115,116,117,119,121,122,126,128,130,132,134,138,139,140,145,148,],[-80,-30,-28,-32,-33,-34,-35,-37,84,92,102,-76,-77,-78,-79,-55,-63,-67,-68,-69,-70,-71,-29,114,119,122,-48,-80,129,-80,-31,-64,-72,-45,-47,-25,-27,140,-46,-80,-36,-26,150,]),'BEGIN':([21,61,84,92,114,150,156,],[46,46,111,113,125,152,158,]),'NUMBER':([30,31,33,34,47,51,52,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,96,97,107,108,109,120,131,146,],[-80,-80,-80,-80,64,78,-57,78,78,-80,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,78,78,78,-65,-66,78,78,-80,]),'STRING':([30,31,33,34,47,51,52,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,96,97,107,108,109,120,131,146,],[-80,-80,-80,-80,65,79,-57,79,79,-80,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,79,79,79,-65,-66,79,79,-80,]),'TRUE':([30,31,33,34,51,52,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,96,97,107,108,109,120,131,146,],[-80,-80,-80,-80,80,-57,80,80,-80,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,80,80,80,-65,-66,80,80,-80,]),'FALSE':([30,31,33,34,51,52,59,60,68,69,70,71,72,73,74,82,85,86,87,88,89,90,91,96,97,107,108,109,120,131,146,],[-80,-80,-80,-80,81,-57,81,81,-80,-56,-58,-59,-60,-61,-62,-80,-80,-49,-50,-51,-52,-53,-54,81,81,81,-65,-66,81,81,-80,]),'EXCEPT':([45,101,],[61,-74,]),'PLUS':([50,53,55,75,76,77,78,79,80,81,105,110,112,121,122,],[70,70,70,-55,-63,-67,-68,-69,-70,-71,70,70,70,-64,-72,]),'MINUS':([50,53,55,75,76,77,78,79,80,81,105,110,112,121,122,],[71,71,71,-55,-63,-67,-68,-69,-70,-71,71,71,71,-64,-72,]),'MUL':([50,53,55,75,76,77,78,79,80,81,105,110,112,121,122,],[72,72,72,-55,-63,-67,-68,-69,-70,-71,72,72,72,-64,-72,]),'DIV':([50,53,55,75,76,77,78,79,80,81,105,110,112,121,122,],[73,73,73,-55,-63,-67,-68,-69,-70,-71,73,73,73,-64,-72,]),'REM':([50,53,55,75,76,77,78,79,80,81,105,110,112,121,122,],[74,74,74,-55,-63,-67,-68,-69,-70,-71,74,74,74,-64,-72,]),'RSPAREN':([53,75,76,77,78,79,80,81,117,118,121,122,130,132,139,145,],[83,-55,-63,-67,-68,-69,-70,-71,-80,133,-64,-72,-25,-27,-80,-26,]),'EQEQ':([55,75,76,77,78,79,80,81,121,122,],[86,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'NOTEQ':([55,75,76,77,78,79,80,81,121,122,],[87,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'LT':([55,75,76,77,78,79,80,81,121,122,],[88,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'GT':([55,75,76,77,78,79,80,81,121,122,],[89,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'LTEQ':([55,75,76,77,78,79,80,81,121,122,],[90,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'GTEQ':([55,75,76,77,78,79,80,81,121,122,],[91,-55,-63,-67,-68,-69,-70,-71,-64,-72,]),'PLUSPLUS':([75,76,77,78,79,80,81,121,122,],[108,-63,-67,-68,-69,-70,-71,-64,-72,]),'MINUSMINUS':([75,76,77,78,79,80,81,121,122,],[109,-63,-67,-68,-69,-70,-71,-64,-72,]),'COMMA':([77,78,79,80,81,99,115,117,122,130,132,139,145,],[-67,-68,-69,-70,-71,120,127,131,-72,-25,-27,131,-26,]),'ELIF':([135,],[142,]),'ELSE':([154,],[156,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statement_list':([0,25,46,111,113,125,152,158,],[2,48,62,123,124,137,153,159,]),'statement':([0,25,46,111,113,125,152,158,],[3,3,3,3,3,3,3,3,]),'empty':([0,20,25,30,31,33,34,46,68,82,85,111,113,115,117,125,135,139,146,152,154,158,],[4,44,4,52,52,52,52,4,52,52,52,4,4,128,132,4,143,132,52,4,157,4,]),'declaration':([0,25,46,111,113,125,152,158,],[5,5,5,5,5,5,5,5,]),'assignment':([0,25,46,111,113,125,152,158,],[6,6,6,6,6,6,6,6,]),'if_stmnt':([0,25,46,111,113,125,152,158,],[7,7,7,7,7,7,7,7,]),'while_stmt':([0,25,46,111,113,125,152,158,],[8,8,8,8,8,8,8,8,]),'function_call':([0,25,46,111,113,125,152,158,],[9,9,9,9,9,9,9,9,]),'compound_types':([0,25,46,111,113,125,152,158,],[10,10,10,10,10,10,10,10,]),'compound_type_access':([0,25,46,47,68,111,113,125,152,158,],[11,11,11,67,106,11,11,11,11,11,]),'try_except':([0,25,46,111,113,125,152,158,],[12,12,12,12,12,12,12,12,]),'print':([0,25,46,111,113,125,152,158,],[13,13,13,13,13,13,13,13,]),'A':([0,25,46,111,113,125,152,158,],[19,19,19,19,19,19,19,19,]),'Z':([0,25,46,47,68,111,113,125,152,158,],[20,20,20,20,20,20,20,20,20,20,]),'type':([14,57,127,],[26,94,94,]),'F':([20,],[37,]),'x':([21,61,],[45,100,]),'expression':([30,31,33,34,68,82,85,146,],[50,53,55,55,105,110,112,55,]),'D':([30,31,33,34,68,82,85,146,],[51,51,51,51,51,51,51,51,]),'condition':([33,34,146,],[54,56,148,]),'y':([47,],[63,]),'binary_operator':([50,53,55,105,110,112,],[69,69,69,69,69,69,]),'term':([51,],[75,]),'factor':([51,59,60,96,97,107,120,131,],[76,98,99,117,117,121,134,117,]),'comparison_operator':([55,],[85,]),'parameter_list':([57,127,],[93,138,]),'N':([58,],[95,]),'L':([68,],[104,]),'unary_operator':([75,],[107,]),'data':([96,97,131,],[116,118,139,]),'M':([115,],[126,]),'P':([117,139,],[130,145,]),'T':([135,],[141,]),'K':([154,],[155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statement_list','start',1,'p_start','my_lex.py',147),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','my_lex.py',152),
  ('statement_list -> empty','statement_list',1,'p_statement_list','my_lex.py',153),
  ('statement -> declaration','statement',1,'p_statement','my_lex.py',158),
  ('statement -> assignment','statement',1,'p_statement','my_lex.py',159),
  ('statement -> if_stmnt','statement',1,'p_statement','my_lex.py',160),
  ('statement -> while_stmt','statement',1,'p_statement','my_lex.py',161),
  ('statement -> function_call','statement',1,'p_statement','my_lex.py',162),
  ('statement -> compound_types','statement',1,'p_statement','my_lex.py',163),
  ('statement -> compound_type_access','statement',1,'p_statement','my_lex.py',164),
  ('statement -> try_except','statement',1,'p_statement','my_lex.py',165),
  ('statement -> print','statement',1,'p_statement','my_lex.py',166),
  ('declaration -> VAR type ID ASSIGN L','declaration',5,'p_declaration','my_lex.py',171),
  ('L -> expression','L',1,'p_L','my_lex.py',175),
  ('L -> compound_type_access','L',1,'p_L','my_lex.py',176),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','my_lex.py',179),
  ('type -> INT','type',1,'p_type','my_lex.py',183),
  ('type -> BOOL','type',1,'p_type','my_lex.py',184),
  ('type -> STR','type',1,'p_type','my_lex.py',185),
  ('compound_types -> A ID ASSIGN N','compound_types',4,'p_compound_types','my_lex.py',190),
  ('A -> TUPLE','A',1,'p_A','my_lex.py',195),
  ('A -> LIST','A',1,'p_A','my_lex.py',196),
  ('N -> LPAREN data RPAREN','N',3,'p_N','my_lex.py',200),
  ('N -> LSPAREN data RSPAREN','N',3,'p_N','my_lex.py',201),
  ('data -> factor P','data',2,'p_data','my_lex.py',205),
  ('P -> COMMA data P','P',3,'p_P','my_lex.py',209),
  ('P -> empty','P',1,'p_P','my_lex.py',210),
  ('compound_type_access -> Z F','compound_type_access',2,'p_compound_type_access','my_lex.py',214),
  ('compound_type_access -> ID LSPAREN expression RSPAREN','compound_type_access',4,'p_compound_type_access','my_lex.py',215),
  ('Z -> ID DOT','Z',2,'p_Z','my_lex.py',219),
  ('F -> CON LPAREN factor RPAREN','F',4,'p_F','my_lex.py',223),
  ('F -> FRONT','F',1,'p_F','my_lex.py',224),
  ('F -> REAR','F',1,'p_F','my_lex.py',225),
  ('F -> SIZE','F',1,'p_F','my_lex.py',226),
  ('F -> DELETE','F',1,'p_F','my_lex.py',227),
  ('F -> SUBSTR LPAREN factor COMMA factor RPAREN','F',6,'p_F','my_lex.py',228),
  ('F -> empty','F',1,'p_F','my_lex.py',229),
  ('if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T','if_stmnt',8,'p_if_stmnt','my_lex.py',233),
  ('T -> ELIF LPAREN condition RPAREN BEGIN statement_list END K','T',8,'p_T','my_lex.py',237),
  ('T -> empty','T',1,'p_T','my_lex.py',238),
  ('K -> ELSE BEGIN statement_list END','K',4,'p_K','my_lex.py',242),
  ('K -> empty','K',1,'p_K','my_lex.py',243),
  ('while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END','while_stmt',7,'p_while_stmt','my_lex.py',247),
  ('function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN ID SEMICOLON END','function_call',11,'p_function_call','my_lex.py',251),
  ('parameter_list -> type ID M','parameter_list',3,'p_parameter_list','my_lex.py',255),
  ('M -> COMMA parameter_list','M',2,'p_M','my_lex.py',259),
  ('M -> empty','M',1,'p_M','my_lex.py',260),
  ('condition -> expression comparison_operator expression','condition',3,'p_condition','my_lex.py',264),
  ('comparison_operator -> EQEQ','comparison_operator',1,'p_comparison_operator','my_lex.py',268),
  ('comparison_operator -> NOTEQ','comparison_operator',1,'p_comparison_operator','my_lex.py',269),
  ('comparison_operator -> LT','comparison_operator',1,'p_comparison_operator','my_lex.py',270),
  ('comparison_operator -> GT','comparison_operator',1,'p_comparison_operator','my_lex.py',271),
  ('comparison_operator -> LTEQ','comparison_operator',1,'p_comparison_operator','my_lex.py',272),
  ('comparison_operator -> GTEQ','comparison_operator',1,'p_comparison_operator','my_lex.py',273),
  ('expression -> D term','expression',2,'p_expression','my_lex.py',277),
  ('D -> expression binary_operator','D',2,'p_D','my_lex.py',281),
  ('D -> empty','D',1,'p_D','my_lex.py',282),
  ('binary_operator -> PLUS','binary_operator',1,'p_binary_operator','my_lex.py',286),
  ('binary_operator -> MINUS','binary_operator',1,'p_binary_operator','my_lex.py',287),
  ('binary_operator -> MUL','binary_operator',1,'p_binary_operator','my_lex.py',288),
  ('binary_operator -> DIV','binary_operator',1,'p_binary_operator','my_lex.py',289),
  ('binary_operator -> REM','binary_operator',1,'p_binary_operator','my_lex.py',290),
  ('term -> factor','term',1,'p_term','my_lex.py',294),
  ('term -> term unary_operator factor','term',3,'p_term','my_lex.py',295),
  ('unary_operator -> PLUSPLUS','unary_operator',1,'p_unary_operator','my_lex.py',299),
  ('unary_operator -> MINUSMINUS','unary_operator',1,'p_unary_operator','my_lex.py',300),
  ('factor -> ID','factor',1,'p_factor','my_lex.py',304),
  ('factor -> NUMBER','factor',1,'p_factor','my_lex.py',305),
  ('factor -> STRING','factor',1,'p_factor','my_lex.py',306),
  ('factor -> TRUE','factor',1,'p_factor','my_lex.py',307),
  ('factor -> FALSE','factor',1,'p_factor','my_lex.py',308),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','my_lex.py',309),
  ('try_except -> TRY x EXCEPT x','try_except',4,'p_try_except','my_lex.py',313),
  ('x -> BEGIN statement_list END','x',3,'p_x','my_lex.py',317),
  ('print -> ZOUT LPAREN y RPAREN','print',4,'p_print','my_lex.py',321),
  ('y -> NUMBER','y',1,'p_y','my_lex.py',325),
  ('y -> STRING','y',1,'p_y','my_lex.py',326),
  ('y -> ID','y',1,'p_y','my_lex.py',327),
  ('y -> compound_type_access','y',1,'p_y','my_lex.py',328),
  ('empty -> <empty>','empty',0,'p_empty','my_lex.py',332),
]
