Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statement_list
Rule 2     statement_list -> statement_list statement SEMICOLON
Rule 3     statement_list -> <empty>
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> if_stmnt
Rule 7     statement -> while_stmt
Rule 8     statement -> function_definition
Rule 9     statement -> expression
Rule 10    statement -> compound_types
Rule 11    statement -> compound_type_access
Rule 12    statement -> try_except
Rule 13    statement -> print
Rule 14    declaration -> VAR type ID ASSIGN L
Rule 15    assignment -> ID ASSIGN L
Rule 16    L -> statement
Rule 17    L -> ID LPAREN data RPAREN
Rule 18    L -> <empty>
Rule 19    type -> INT
Rule 20    type -> BOOL
Rule 21    type -> STR
Rule 22    type -> VOID
Rule 23    compound_types -> A ID ASSIGN LPAREN data RPAREN
Rule 24    A -> TUPLE
Rule 25    A -> LIST
Rule 26    data -> expression hi
Rule 27    data -> <empty>
Rule 28    hi -> COMMA data
Rule 29    hi -> <empty>
Rule 30    compound_type_access -> ID DOT F
Rule 31    compound_type_access -> ID LSPAREN expression RSPAREN
Rule 32    F -> CON LPAREN factor RPAREN
Rule 33    F -> FRONT
Rule 34    F -> ADDD
Rule 35    F -> LPAREN factor RPAREN
Rule 36    F -> REAR
Rule 37    F -> SIZE
Rule 38    F -> DELETE
Rule 39    F -> SUBSTR LPAREN data RPAREN
Rule 40    F -> <empty>
Rule 41    binary_operator -> MINUS
Rule 42    binary_operator -> MUL
Rule 43    binary_operator -> PLUS
Rule 44    binary_operator -> DIV
Rule 45    binary_operator -> REM
Rule 46    unary_operator -> PLUSPLUS
Rule 47    unary_operator -> MINUSMINUS
Rule 48    term -> factor
Rule 49    term -> term unary_operator
Rule 50    if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T K
Rule 51    comparison_operator -> EQEQ
Rule 52    comparison_operator -> NOTEQ
Rule 53    comparison_operator -> LT
Rule 54    comparison_operator -> GT
Rule 55    comparison_operator -> LTEQ
Rule 56    comparison_operator -> GTEQ
Rule 57    T -> ELIF LPAREN condition RPAREN BEGIN statement_list END T
Rule 58    T -> <empty>
Rule 59    K -> ELSE BEGIN statement_list END
Rule 60    K -> <empty>
Rule 61    while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END
Rule 62    function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
Rule 63    parameter_list -> type ID optional_parameter_list
Rule 64    parameter_list -> A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
Rule 65    parameter_list -> <empty>
Rule 66    optional_parameter_list -> COMMA type ID optional_parameter_list
Rule 67    optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
Rule 68    optional_parameter_list -> <empty>
Rule 69    condition -> expression comparison_operator expression
Rule 70    expression -> expression binary_operator term
Rule 71    expression -> term
Rule 72    factor -> ID
Rule 73    factor -> NUMBER
Rule 74    factor -> STRING
Rule 75    factor -> TRUE
Rule 76    factor -> FALSE
Rule 77    factor -> LPAREN expression RPAREN
Rule 78    try_except -> BEGIN TRY statement_list EXCEPT statement_list END
Rule 79    print -> ZOUT LPAREN y RPAREN
Rule 80    y -> expression
Rule 81    y -> compound_type_access

Terminals, with rules where they appear

ADDD                 : 34
ASSIGN               : 14 15 23
BEGIN                : 50 57 59 61 62 78
BOOL                 : 20
COMMA                : 28 66 67
CON                  : 32
DELETE               : 38
DIV                  : 44
DOT                  : 30
ELIF                 : 57
ELSE                 : 59
END                  : 50 57 59 61 62 78
EQEQ                 : 51
EXCEPT               : 78
FALSE                : 76
FRONT                : 33
GT                   : 54
GTEQ                 : 56
ID                   : 14 15 17 23 30 31 62 63 64 66 67 72
IF                   : 50
INT                  : 19
LIST                 : 25
LPAREN               : 17 23 32 35 39 50 57 61 62 77 79
LSPAREN              : 31 64 64 67 67
LT                   : 53
LTEQ                 : 55
MINUS                : 41
MINUSMINUS           : 47
MUL                  : 42
NOTEQ                : 52
NUMBER               : 73
PLUS                 : 43
PLUSPLUS             : 46
REAR                 : 36
REM                  : 45
RETURN               : 62
RPAREN               : 17 23 32 35 39 50 57 61 62 77 79
RSPAREN              : 31 64 64 67 67
SEMICOLON            : 2 62
SIZE                 : 37
STR                  : 21
STRING               : 74
SUBSTR               : 39
TRUE                 : 75
TRY                  : 78
TUPLE                : 24
VAR                  : 14
VOID                 : 22
WHILE                : 61
ZOUT                 : 79
error                : 

Nonterminals, with rules where they appear

A                    : 23 64 67
F                    : 30
K                    : 50
L                    : 14 15 62
T                    : 50 57
assignment           : 5
binary_operator      : 70
comparison_operator  : 69
compound_type_access : 11 81
compound_types       : 10
condition            : 50 57 61
data                 : 17 23 28 39
declaration          : 4
expression           : 9 26 31 69 69 70 77 80
factor               : 32 35 48
function_definition  : 8
hi                   : 26
if_stmnt             : 6
optional_parameter_list : 63 64 66 67
parameter_list       : 62
print                : 13
start                : 0
statement            : 2 16
statement_list       : 1 2 50 57 59 61 62 78 78
term                 : 49 70 71
try_except           : 12
type                 : 14 62 63 64 66 67
unary_operator       : 49
while_stmt           : 7
y                    : 79

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement_list
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)
    $end            reduce using rule 3 (statement_list -> .)

    start                          shift and go to state 1
    statement_list                 shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> statement_list .
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (start -> statement_list .)
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 3

    (2) statement_list -> statement_list statement . SEMICOLON

    SEMICOLON       shift and go to state 35


state 4

    (4) statement -> declaration .

    SEMICOLON       reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    SEMICOLON       reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> if_stmnt .

    SEMICOLON       reduce using rule 6 (statement -> if_stmnt .)


state 7

    (7) statement -> while_stmt .

    SEMICOLON       reduce using rule 7 (statement -> while_stmt .)


state 8

    (8) statement -> function_definition .

    SEMICOLON       reduce using rule 8 (statement -> function_definition .)


state 9

    (9) statement -> expression .
    (70) expression -> expression . binary_operator term
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    SEMICOLON       reduce using rule 9 (statement -> expression .)
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    binary_operator                shift and go to state 36

state 10

    (10) statement -> compound_types .

    SEMICOLON       reduce using rule 10 (statement -> compound_types .)


state 11

    (11) statement -> compound_type_access .

    SEMICOLON       reduce using rule 11 (statement -> compound_type_access .)


state 12

    (12) statement -> try_except .

    SEMICOLON       reduce using rule 12 (statement -> try_except .)


state 13

    (13) statement -> print .

    SEMICOLON       reduce using rule 13 (statement -> print .)


state 14

    (14) declaration -> VAR . type ID ASSIGN L
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID

    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27

    type                           shift and go to state 42

state 15

    (62) function_definition -> type . ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END

    ID              shift and go to state 43


state 16

    (15) assignment -> ID . ASSIGN L
    (30) compound_type_access -> ID . DOT F
    (31) compound_type_access -> ID . LSPAREN expression RSPAREN
    (72) factor -> ID .

    ASSIGN          shift and go to state 44
    DOT             shift and go to state 45
    LSPAREN         shift and go to state 46
    PLUSPLUS        reduce using rule 72 (factor -> ID .)
    MINUSMINUS      reduce using rule 72 (factor -> ID .)
    MINUS           reduce using rule 72 (factor -> ID .)
    MUL             reduce using rule 72 (factor -> ID .)
    PLUS            reduce using rule 72 (factor -> ID .)
    DIV             reduce using rule 72 (factor -> ID .)
    REM             reduce using rule 72 (factor -> ID .)
    SEMICOLON       reduce using rule 72 (factor -> ID .)


state 17

    (50) if_stmnt -> IF . LPAREN condition RPAREN BEGIN statement_list END T K

    LPAREN          shift and go to state 47


state 18

    (77) factor -> LPAREN . expression RPAREN
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    expression                     shift and go to state 48
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 19

    (78) try_except -> BEGIN . TRY statement_list EXCEPT statement_list END

    TRY             shift and go to state 50


state 20

    (61) while_stmt -> WHILE . LPAREN condition RPAREN BEGIN statement_list END

    LPAREN          shift and go to state 51


state 21

    (71) expression -> term .
    (49) term -> term . unary_operator
    (46) unary_operator -> . PLUSPLUS
    (47) unary_operator -> . MINUSMINUS

    MINUS           reduce using rule 71 (expression -> term .)
    MUL             reduce using rule 71 (expression -> term .)
    PLUS            reduce using rule 71 (expression -> term .)
    DIV             reduce using rule 71 (expression -> term .)
    REM             reduce using rule 71 (expression -> term .)
    SEMICOLON       reduce using rule 71 (expression -> term .)
    RPAREN          reduce using rule 71 (expression -> term .)
    RSPAREN         reduce using rule 71 (expression -> term .)
    EQEQ            reduce using rule 71 (expression -> term .)
    NOTEQ           reduce using rule 71 (expression -> term .)
    LT              reduce using rule 71 (expression -> term .)
    GT              reduce using rule 71 (expression -> term .)
    LTEQ            reduce using rule 71 (expression -> term .)
    GTEQ            reduce using rule 71 (expression -> term .)
    COMMA           reduce using rule 71 (expression -> term .)
    PLUSPLUS        shift and go to state 53
    MINUSMINUS      shift and go to state 54

    unary_operator                 shift and go to state 52

state 22

    (23) compound_types -> A . ID ASSIGN LPAREN data RPAREN

    ID              shift and go to state 55


state 23

    (79) print -> ZOUT . LPAREN y RPAREN

    LPAREN          shift and go to state 56


state 24

    (19) type -> INT .

    ID              reduce using rule 19 (type -> INT .)
    RSPAREN         reduce using rule 19 (type -> INT .)


state 25

    (20) type -> BOOL .

    ID              reduce using rule 20 (type -> BOOL .)
    RSPAREN         reduce using rule 20 (type -> BOOL .)


state 26

    (21) type -> STR .

    ID              reduce using rule 21 (type -> STR .)
    RSPAREN         reduce using rule 21 (type -> STR .)


state 27

    (22) type -> VOID .

    ID              reduce using rule 22 (type -> VOID .)
    RSPAREN         reduce using rule 22 (type -> VOID .)


state 28

    (48) term -> factor .

    PLUSPLUS        reduce using rule 48 (term -> factor .)
    MINUSMINUS      reduce using rule 48 (term -> factor .)
    MINUS           reduce using rule 48 (term -> factor .)
    MUL             reduce using rule 48 (term -> factor .)
    PLUS            reduce using rule 48 (term -> factor .)
    DIV             reduce using rule 48 (term -> factor .)
    REM             reduce using rule 48 (term -> factor .)
    SEMICOLON       reduce using rule 48 (term -> factor .)
    RPAREN          reduce using rule 48 (term -> factor .)
    RSPAREN         reduce using rule 48 (term -> factor .)
    EQEQ            reduce using rule 48 (term -> factor .)
    NOTEQ           reduce using rule 48 (term -> factor .)
    LT              reduce using rule 48 (term -> factor .)
    GT              reduce using rule 48 (term -> factor .)
    LTEQ            reduce using rule 48 (term -> factor .)
    GTEQ            reduce using rule 48 (term -> factor .)
    COMMA           reduce using rule 48 (term -> factor .)


state 29

    (24) A -> TUPLE .

    ID              reduce using rule 24 (A -> TUPLE .)
    LSPAREN         reduce using rule 24 (A -> TUPLE .)


state 30

    (25) A -> LIST .

    ID              reduce using rule 25 (A -> LIST .)
    LSPAREN         reduce using rule 25 (A -> LIST .)


state 31

    (73) factor -> NUMBER .

    PLUSPLUS        reduce using rule 73 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 73 (factor -> NUMBER .)
    MINUS           reduce using rule 73 (factor -> NUMBER .)
    MUL             reduce using rule 73 (factor -> NUMBER .)
    PLUS            reduce using rule 73 (factor -> NUMBER .)
    DIV             reduce using rule 73 (factor -> NUMBER .)
    REM             reduce using rule 73 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 73 (factor -> NUMBER .)
    RPAREN          reduce using rule 73 (factor -> NUMBER .)
    RSPAREN         reduce using rule 73 (factor -> NUMBER .)
    EQEQ            reduce using rule 73 (factor -> NUMBER .)
    NOTEQ           reduce using rule 73 (factor -> NUMBER .)
    LT              reduce using rule 73 (factor -> NUMBER .)
    GT              reduce using rule 73 (factor -> NUMBER .)
    LTEQ            reduce using rule 73 (factor -> NUMBER .)
    GTEQ            reduce using rule 73 (factor -> NUMBER .)
    COMMA           reduce using rule 73 (factor -> NUMBER .)


state 32

    (74) factor -> STRING .

    PLUSPLUS        reduce using rule 74 (factor -> STRING .)
    MINUSMINUS      reduce using rule 74 (factor -> STRING .)
    MINUS           reduce using rule 74 (factor -> STRING .)
    MUL             reduce using rule 74 (factor -> STRING .)
    PLUS            reduce using rule 74 (factor -> STRING .)
    DIV             reduce using rule 74 (factor -> STRING .)
    REM             reduce using rule 74 (factor -> STRING .)
    SEMICOLON       reduce using rule 74 (factor -> STRING .)
    RPAREN          reduce using rule 74 (factor -> STRING .)
    RSPAREN         reduce using rule 74 (factor -> STRING .)
    EQEQ            reduce using rule 74 (factor -> STRING .)
    NOTEQ           reduce using rule 74 (factor -> STRING .)
    LT              reduce using rule 74 (factor -> STRING .)
    GT              reduce using rule 74 (factor -> STRING .)
    LTEQ            reduce using rule 74 (factor -> STRING .)
    GTEQ            reduce using rule 74 (factor -> STRING .)
    COMMA           reduce using rule 74 (factor -> STRING .)


state 33

    (75) factor -> TRUE .

    PLUSPLUS        reduce using rule 75 (factor -> TRUE .)
    MINUSMINUS      reduce using rule 75 (factor -> TRUE .)
    MINUS           reduce using rule 75 (factor -> TRUE .)
    MUL             reduce using rule 75 (factor -> TRUE .)
    PLUS            reduce using rule 75 (factor -> TRUE .)
    DIV             reduce using rule 75 (factor -> TRUE .)
    REM             reduce using rule 75 (factor -> TRUE .)
    SEMICOLON       reduce using rule 75 (factor -> TRUE .)
    RPAREN          reduce using rule 75 (factor -> TRUE .)
    RSPAREN         reduce using rule 75 (factor -> TRUE .)
    EQEQ            reduce using rule 75 (factor -> TRUE .)
    NOTEQ           reduce using rule 75 (factor -> TRUE .)
    LT              reduce using rule 75 (factor -> TRUE .)
    GT              reduce using rule 75 (factor -> TRUE .)
    LTEQ            reduce using rule 75 (factor -> TRUE .)
    GTEQ            reduce using rule 75 (factor -> TRUE .)
    COMMA           reduce using rule 75 (factor -> TRUE .)


state 34

    (76) factor -> FALSE .

    PLUSPLUS        reduce using rule 76 (factor -> FALSE .)
    MINUSMINUS      reduce using rule 76 (factor -> FALSE .)
    MINUS           reduce using rule 76 (factor -> FALSE .)
    MUL             reduce using rule 76 (factor -> FALSE .)
    PLUS            reduce using rule 76 (factor -> FALSE .)
    DIV             reduce using rule 76 (factor -> FALSE .)
    REM             reduce using rule 76 (factor -> FALSE .)
    SEMICOLON       reduce using rule 76 (factor -> FALSE .)
    RPAREN          reduce using rule 76 (factor -> FALSE .)
    RSPAREN         reduce using rule 76 (factor -> FALSE .)
    EQEQ            reduce using rule 76 (factor -> FALSE .)
    NOTEQ           reduce using rule 76 (factor -> FALSE .)
    LT              reduce using rule 76 (factor -> FALSE .)
    GT              reduce using rule 76 (factor -> FALSE .)
    LTEQ            reduce using rule 76 (factor -> FALSE .)
    GTEQ            reduce using rule 76 (factor -> FALSE .)
    COMMA           reduce using rule 76 (factor -> FALSE .)


state 35

    (2) statement_list -> statement_list statement SEMICOLON .

    VAR             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    ID              reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    IF              reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    BEGIN           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    ZOUT            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    INT             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    BOOL            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    STR             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    VOID            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    TUPLE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    LIST            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    $end            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    EXCEPT          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    END             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)


state 36

    (70) expression -> expression binary_operator . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    term                           shift and go to state 57
    factor                         shift and go to state 28

state 37

    (41) binary_operator -> MINUS .

    ID              reduce using rule 41 (binary_operator -> MINUS .)
    NUMBER          reduce using rule 41 (binary_operator -> MINUS .)
    STRING          reduce using rule 41 (binary_operator -> MINUS .)
    TRUE            reduce using rule 41 (binary_operator -> MINUS .)
    FALSE           reduce using rule 41 (binary_operator -> MINUS .)
    LPAREN          reduce using rule 41 (binary_operator -> MINUS .)


state 38

    (42) binary_operator -> MUL .

    ID              reduce using rule 42 (binary_operator -> MUL .)
    NUMBER          reduce using rule 42 (binary_operator -> MUL .)
    STRING          reduce using rule 42 (binary_operator -> MUL .)
    TRUE            reduce using rule 42 (binary_operator -> MUL .)
    FALSE           reduce using rule 42 (binary_operator -> MUL .)
    LPAREN          reduce using rule 42 (binary_operator -> MUL .)


state 39

    (43) binary_operator -> PLUS .

    ID              reduce using rule 43 (binary_operator -> PLUS .)
    NUMBER          reduce using rule 43 (binary_operator -> PLUS .)
    STRING          reduce using rule 43 (binary_operator -> PLUS .)
    TRUE            reduce using rule 43 (binary_operator -> PLUS .)
    FALSE           reduce using rule 43 (binary_operator -> PLUS .)
    LPAREN          reduce using rule 43 (binary_operator -> PLUS .)


state 40

    (44) binary_operator -> DIV .

    ID              reduce using rule 44 (binary_operator -> DIV .)
    NUMBER          reduce using rule 44 (binary_operator -> DIV .)
    STRING          reduce using rule 44 (binary_operator -> DIV .)
    TRUE            reduce using rule 44 (binary_operator -> DIV .)
    FALSE           reduce using rule 44 (binary_operator -> DIV .)
    LPAREN          reduce using rule 44 (binary_operator -> DIV .)


state 41

    (45) binary_operator -> REM .

    ID              reduce using rule 45 (binary_operator -> REM .)
    NUMBER          reduce using rule 45 (binary_operator -> REM .)
    STRING          reduce using rule 45 (binary_operator -> REM .)
    TRUE            reduce using rule 45 (binary_operator -> REM .)
    FALSE           reduce using rule 45 (binary_operator -> REM .)
    LPAREN          reduce using rule 45 (binary_operator -> REM .)


state 42

    (14) declaration -> VAR type . ID ASSIGN L

    ID              shift and go to state 58


state 43

    (62) function_definition -> type ID . LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END

    LPAREN          shift and go to state 59


state 44

    (15) assignment -> ID ASSIGN . L
    (16) L -> . statement
    (17) L -> . ID LPAREN data RPAREN
    (18) L -> .
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    SEMICOLON       reduce using rule 18 (L -> .)
    VAR             shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    L                              shift and go to state 61
    statement                      shift and go to state 62
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 45

    (30) compound_type_access -> ID DOT . F
    (32) F -> . CON LPAREN factor RPAREN
    (33) F -> . FRONT
    (34) F -> . ADDD
    (35) F -> . LPAREN factor RPAREN
    (36) F -> . REAR
    (37) F -> . SIZE
    (38) F -> . DELETE
    (39) F -> . SUBSTR LPAREN data RPAREN
    (40) F -> .

    CON             shift and go to state 64
    FRONT           shift and go to state 66
    ADDD            shift and go to state 67
    LPAREN          shift and go to state 65
    REAR            shift and go to state 68
    SIZE            shift and go to state 69
    DELETE          shift and go to state 70
    SUBSTR          shift and go to state 71
    SEMICOLON       reduce using rule 40 (F -> .)
    RPAREN          reduce using rule 40 (F -> .)

    F                              shift and go to state 63

state 46

    (31) compound_type_access -> ID LSPAREN . expression RSPAREN
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    expression                     shift and go to state 72
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 47

    (50) if_stmnt -> IF LPAREN . condition RPAREN BEGIN statement_list END T K
    (69) condition -> . expression comparison_operator expression
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    condition                      shift and go to state 73
    expression                     shift and go to state 74
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 48

    (77) factor -> LPAREN expression . RPAREN
    (70) expression -> expression . binary_operator term
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    RPAREN          shift and go to state 75
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    binary_operator                shift and go to state 36

state 49

    (72) factor -> ID .

    PLUSPLUS        reduce using rule 72 (factor -> ID .)
    MINUSMINUS      reduce using rule 72 (factor -> ID .)
    RPAREN          reduce using rule 72 (factor -> ID .)
    MINUS           reduce using rule 72 (factor -> ID .)
    MUL             reduce using rule 72 (factor -> ID .)
    PLUS            reduce using rule 72 (factor -> ID .)
    DIV             reduce using rule 72 (factor -> ID .)
    REM             reduce using rule 72 (factor -> ID .)
    SEMICOLON       reduce using rule 72 (factor -> ID .)
    RSPAREN         reduce using rule 72 (factor -> ID .)
    EQEQ            reduce using rule 72 (factor -> ID .)
    NOTEQ           reduce using rule 72 (factor -> ID .)
    LT              reduce using rule 72 (factor -> ID .)
    GT              reduce using rule 72 (factor -> ID .)
    LTEQ            reduce using rule 72 (factor -> ID .)
    GTEQ            reduce using rule 72 (factor -> ID .)
    COMMA           reduce using rule 72 (factor -> ID .)


state 50

    (78) try_except -> BEGIN TRY . statement_list EXCEPT statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    EXCEPT          reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 76

state 51

    (61) while_stmt -> WHILE LPAREN . condition RPAREN BEGIN statement_list END
    (69) condition -> . expression comparison_operator expression
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    condition                      shift and go to state 77
    expression                     shift and go to state 74
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 52

    (49) term -> term unary_operator .

    PLUSPLUS        reduce using rule 49 (term -> term unary_operator .)
    MINUSMINUS      reduce using rule 49 (term -> term unary_operator .)
    MINUS           reduce using rule 49 (term -> term unary_operator .)
    MUL             reduce using rule 49 (term -> term unary_operator .)
    PLUS            reduce using rule 49 (term -> term unary_operator .)
    DIV             reduce using rule 49 (term -> term unary_operator .)
    REM             reduce using rule 49 (term -> term unary_operator .)
    SEMICOLON       reduce using rule 49 (term -> term unary_operator .)
    RPAREN          reduce using rule 49 (term -> term unary_operator .)
    RSPAREN         reduce using rule 49 (term -> term unary_operator .)
    EQEQ            reduce using rule 49 (term -> term unary_operator .)
    NOTEQ           reduce using rule 49 (term -> term unary_operator .)
    LT              reduce using rule 49 (term -> term unary_operator .)
    GT              reduce using rule 49 (term -> term unary_operator .)
    LTEQ            reduce using rule 49 (term -> term unary_operator .)
    GTEQ            reduce using rule 49 (term -> term unary_operator .)
    COMMA           reduce using rule 49 (term -> term unary_operator .)


state 53

    (46) unary_operator -> PLUSPLUS .

    PLUSPLUS        reduce using rule 46 (unary_operator -> PLUSPLUS .)
    MINUSMINUS      reduce using rule 46 (unary_operator -> PLUSPLUS .)
    MINUS           reduce using rule 46 (unary_operator -> PLUSPLUS .)
    MUL             reduce using rule 46 (unary_operator -> PLUSPLUS .)
    PLUS            reduce using rule 46 (unary_operator -> PLUSPLUS .)
    DIV             reduce using rule 46 (unary_operator -> PLUSPLUS .)
    REM             reduce using rule 46 (unary_operator -> PLUSPLUS .)
    SEMICOLON       reduce using rule 46 (unary_operator -> PLUSPLUS .)
    RPAREN          reduce using rule 46 (unary_operator -> PLUSPLUS .)
    RSPAREN         reduce using rule 46 (unary_operator -> PLUSPLUS .)
    EQEQ            reduce using rule 46 (unary_operator -> PLUSPLUS .)
    NOTEQ           reduce using rule 46 (unary_operator -> PLUSPLUS .)
    LT              reduce using rule 46 (unary_operator -> PLUSPLUS .)
    GT              reduce using rule 46 (unary_operator -> PLUSPLUS .)
    LTEQ            reduce using rule 46 (unary_operator -> PLUSPLUS .)
    GTEQ            reduce using rule 46 (unary_operator -> PLUSPLUS .)
    COMMA           reduce using rule 46 (unary_operator -> PLUSPLUS .)


state 54

    (47) unary_operator -> MINUSMINUS .

    PLUSPLUS        reduce using rule 47 (unary_operator -> MINUSMINUS .)
    MINUSMINUS      reduce using rule 47 (unary_operator -> MINUSMINUS .)
    MINUS           reduce using rule 47 (unary_operator -> MINUSMINUS .)
    MUL             reduce using rule 47 (unary_operator -> MINUSMINUS .)
    PLUS            reduce using rule 47 (unary_operator -> MINUSMINUS .)
    DIV             reduce using rule 47 (unary_operator -> MINUSMINUS .)
    REM             reduce using rule 47 (unary_operator -> MINUSMINUS .)
    SEMICOLON       reduce using rule 47 (unary_operator -> MINUSMINUS .)
    RPAREN          reduce using rule 47 (unary_operator -> MINUSMINUS .)
    RSPAREN         reduce using rule 47 (unary_operator -> MINUSMINUS .)
    EQEQ            reduce using rule 47 (unary_operator -> MINUSMINUS .)
    NOTEQ           reduce using rule 47 (unary_operator -> MINUSMINUS .)
    LT              reduce using rule 47 (unary_operator -> MINUSMINUS .)
    GT              reduce using rule 47 (unary_operator -> MINUSMINUS .)
    LTEQ            reduce using rule 47 (unary_operator -> MINUSMINUS .)
    GTEQ            reduce using rule 47 (unary_operator -> MINUSMINUS .)
    COMMA           reduce using rule 47 (unary_operator -> MINUSMINUS .)


state 55

    (23) compound_types -> A ID . ASSIGN LPAREN data RPAREN

    ASSIGN          shift and go to state 78


state 56

    (79) print -> ZOUT LPAREN . y RPAREN
    (80) y -> . expression
    (81) y -> . compound_type_access
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 82
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    y                              shift and go to state 79
    expression                     shift and go to state 80
    compound_type_access           shift and go to state 81
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 57

    (70) expression -> expression binary_operator term .
    (49) term -> term . unary_operator
    (46) unary_operator -> . PLUSPLUS
    (47) unary_operator -> . MINUSMINUS

    MINUS           reduce using rule 70 (expression -> expression binary_operator term .)
    MUL             reduce using rule 70 (expression -> expression binary_operator term .)
    PLUS            reduce using rule 70 (expression -> expression binary_operator term .)
    DIV             reduce using rule 70 (expression -> expression binary_operator term .)
    REM             reduce using rule 70 (expression -> expression binary_operator term .)
    SEMICOLON       reduce using rule 70 (expression -> expression binary_operator term .)
    RPAREN          reduce using rule 70 (expression -> expression binary_operator term .)
    RSPAREN         reduce using rule 70 (expression -> expression binary_operator term .)
    EQEQ            reduce using rule 70 (expression -> expression binary_operator term .)
    NOTEQ           reduce using rule 70 (expression -> expression binary_operator term .)
    LT              reduce using rule 70 (expression -> expression binary_operator term .)
    GT              reduce using rule 70 (expression -> expression binary_operator term .)
    LTEQ            reduce using rule 70 (expression -> expression binary_operator term .)
    GTEQ            reduce using rule 70 (expression -> expression binary_operator term .)
    COMMA           reduce using rule 70 (expression -> expression binary_operator term .)
    PLUSPLUS        shift and go to state 53
    MINUSMINUS      shift and go to state 54

    unary_operator                 shift and go to state 52

state 58

    (14) declaration -> VAR type ID . ASSIGN L

    ASSIGN          shift and go to state 83


state 59

    (62) function_definition -> type ID LPAREN . parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (63) parameter_list -> . type ID optional_parameter_list
    (64) parameter_list -> . A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (65) parameter_list -> .
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (24) A -> . TUPLE
    (25) A -> . LIST

    RPAREN          reduce using rule 65 (parameter_list -> .)
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30

    type                           shift and go to state 84
    parameter_list                 shift and go to state 85
    A                              shift and go to state 86

state 60

    (17) L -> ID . LPAREN data RPAREN
    (15) assignment -> ID . ASSIGN L
    (30) compound_type_access -> ID . DOT F
    (31) compound_type_access -> ID . LSPAREN expression RSPAREN
    (72) factor -> ID .

    LPAREN          shift and go to state 87
    ASSIGN          shift and go to state 44
    DOT             shift and go to state 45
    LSPAREN         shift and go to state 46
    PLUSPLUS        reduce using rule 72 (factor -> ID .)
    MINUSMINUS      reduce using rule 72 (factor -> ID .)
    MINUS           reduce using rule 72 (factor -> ID .)
    MUL             reduce using rule 72 (factor -> ID .)
    PLUS            reduce using rule 72 (factor -> ID .)
    DIV             reduce using rule 72 (factor -> ID .)
    REM             reduce using rule 72 (factor -> ID .)
    SEMICOLON       reduce using rule 72 (factor -> ID .)


state 61

    (15) assignment -> ID ASSIGN L .

    SEMICOLON       reduce using rule 15 (assignment -> ID ASSIGN L .)


state 62

    (16) L -> statement .

    SEMICOLON       reduce using rule 16 (L -> statement .)


state 63

    (30) compound_type_access -> ID DOT F .

    SEMICOLON       reduce using rule 30 (compound_type_access -> ID DOT F .)
    RPAREN          reduce using rule 30 (compound_type_access -> ID DOT F .)


state 64

    (32) F -> CON . LPAREN factor RPAREN

    LPAREN          shift and go to state 88


state 65

    (35) F -> LPAREN . factor RPAREN
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    factor                         shift and go to state 89

state 66

    (33) F -> FRONT .

    SEMICOLON       reduce using rule 33 (F -> FRONT .)
    RPAREN          reduce using rule 33 (F -> FRONT .)


state 67

    (34) F -> ADDD .

    SEMICOLON       reduce using rule 34 (F -> ADDD .)
    RPAREN          reduce using rule 34 (F -> ADDD .)


state 68

    (36) F -> REAR .

    SEMICOLON       reduce using rule 36 (F -> REAR .)
    RPAREN          reduce using rule 36 (F -> REAR .)


state 69

    (37) F -> SIZE .

    SEMICOLON       reduce using rule 37 (F -> SIZE .)
    RPAREN          reduce using rule 37 (F -> SIZE .)


state 70

    (38) F -> DELETE .

    SEMICOLON       reduce using rule 38 (F -> DELETE .)
    RPAREN          reduce using rule 38 (F -> DELETE .)


state 71

    (39) F -> SUBSTR . LPAREN data RPAREN

    LPAREN          shift and go to state 90


state 72

    (31) compound_type_access -> ID LSPAREN expression . RSPAREN
    (70) expression -> expression . binary_operator term
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    RSPAREN         shift and go to state 91
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    binary_operator                shift and go to state 36

state 73

    (50) if_stmnt -> IF LPAREN condition . RPAREN BEGIN statement_list END T K

    RPAREN          shift and go to state 92


state 74

    (69) condition -> expression . comparison_operator expression
    (70) expression -> expression . binary_operator term
    (51) comparison_operator -> . EQEQ
    (52) comparison_operator -> . NOTEQ
    (53) comparison_operator -> . LT
    (54) comparison_operator -> . GT
    (55) comparison_operator -> . LTEQ
    (56) comparison_operator -> . GTEQ
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    EQEQ            shift and go to state 94
    NOTEQ           shift and go to state 95
    LT              shift and go to state 96
    GT              shift and go to state 97
    LTEQ            shift and go to state 98
    GTEQ            shift and go to state 99
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    comparison_operator            shift and go to state 93
    binary_operator                shift and go to state 36

state 75

    (77) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MUL             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    REM             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    EQEQ            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (factor -> LPAREN expression RPAREN .)


state 76

    (78) try_except -> BEGIN TRY statement_list . EXCEPT statement_list END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    EXCEPT          shift and go to state 100
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 77

    (61) while_stmt -> WHILE LPAREN condition . RPAREN BEGIN statement_list END

    RPAREN          shift and go to state 101


state 78

    (23) compound_types -> A ID ASSIGN . LPAREN data RPAREN

    LPAREN          shift and go to state 102


state 79

    (79) print -> ZOUT LPAREN y . RPAREN

    RPAREN          shift and go to state 103


state 80

    (80) y -> expression .
    (70) expression -> expression . binary_operator term
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    RPAREN          reduce using rule 80 (y -> expression .)
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    binary_operator                shift and go to state 36

state 81

    (81) y -> compound_type_access .

    RPAREN          reduce using rule 81 (y -> compound_type_access .)


state 82

    (30) compound_type_access -> ID . DOT F
    (31) compound_type_access -> ID . LSPAREN expression RSPAREN
    (72) factor -> ID .

    DOT             shift and go to state 45
    LSPAREN         shift and go to state 46
    PLUSPLUS        reduce using rule 72 (factor -> ID .)
    MINUSMINUS      reduce using rule 72 (factor -> ID .)
    MINUS           reduce using rule 72 (factor -> ID .)
    MUL             reduce using rule 72 (factor -> ID .)
    PLUS            reduce using rule 72 (factor -> ID .)
    DIV             reduce using rule 72 (factor -> ID .)
    REM             reduce using rule 72 (factor -> ID .)
    RPAREN          reduce using rule 72 (factor -> ID .)


state 83

    (14) declaration -> VAR type ID ASSIGN . L
    (16) L -> . statement
    (17) L -> . ID LPAREN data RPAREN
    (18) L -> .
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    SEMICOLON       reduce using rule 18 (L -> .)
    VAR             shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    type                           shift and go to state 15
    L                              shift and go to state 104
    statement                      shift and go to state 62
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 84

    (63) parameter_list -> type . ID optional_parameter_list

    ID              shift and go to state 105


state 85

    (62) function_definition -> type ID LPAREN parameter_list . RPAREN BEGIN statement_list RETURN L SEMICOLON END

    RPAREN          shift and go to state 106


state 86

    (64) parameter_list -> A . LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list

    LSPAREN         shift and go to state 107


state 87

    (17) L -> ID LPAREN . data RPAREN
    (26) data -> . expression hi
    (27) data -> .
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 27 (data -> .)
    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    data                           shift and go to state 108
    expression                     shift and go to state 109
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 88

    (32) F -> CON LPAREN . factor RPAREN
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    factor                         shift and go to state 110

state 89

    (35) F -> LPAREN factor . RPAREN

    RPAREN          shift and go to state 111


state 90

    (39) F -> SUBSTR LPAREN . data RPAREN
    (26) data -> . expression hi
    (27) data -> .
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 27 (data -> .)
    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    data                           shift and go to state 112
    expression                     shift and go to state 109
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 91

    (31) compound_type_access -> ID LSPAREN expression RSPAREN .

    SEMICOLON       reduce using rule 31 (compound_type_access -> ID LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 31 (compound_type_access -> ID LSPAREN expression RSPAREN .)


state 92

    (50) if_stmnt -> IF LPAREN condition RPAREN . BEGIN statement_list END T K

    BEGIN           shift and go to state 113


state 93

    (69) condition -> expression comparison_operator . expression
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    expression                     shift and go to state 114
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 94

    (51) comparison_operator -> EQEQ .

    ID              reduce using rule 51 (comparison_operator -> EQEQ .)
    NUMBER          reduce using rule 51 (comparison_operator -> EQEQ .)
    STRING          reduce using rule 51 (comparison_operator -> EQEQ .)
    TRUE            reduce using rule 51 (comparison_operator -> EQEQ .)
    FALSE           reduce using rule 51 (comparison_operator -> EQEQ .)
    LPAREN          reduce using rule 51 (comparison_operator -> EQEQ .)


state 95

    (52) comparison_operator -> NOTEQ .

    ID              reduce using rule 52 (comparison_operator -> NOTEQ .)
    NUMBER          reduce using rule 52 (comparison_operator -> NOTEQ .)
    STRING          reduce using rule 52 (comparison_operator -> NOTEQ .)
    TRUE            reduce using rule 52 (comparison_operator -> NOTEQ .)
    FALSE           reduce using rule 52 (comparison_operator -> NOTEQ .)
    LPAREN          reduce using rule 52 (comparison_operator -> NOTEQ .)


state 96

    (53) comparison_operator -> LT .

    ID              reduce using rule 53 (comparison_operator -> LT .)
    NUMBER          reduce using rule 53 (comparison_operator -> LT .)
    STRING          reduce using rule 53 (comparison_operator -> LT .)
    TRUE            reduce using rule 53 (comparison_operator -> LT .)
    FALSE           reduce using rule 53 (comparison_operator -> LT .)
    LPAREN          reduce using rule 53 (comparison_operator -> LT .)


state 97

    (54) comparison_operator -> GT .

    ID              reduce using rule 54 (comparison_operator -> GT .)
    NUMBER          reduce using rule 54 (comparison_operator -> GT .)
    STRING          reduce using rule 54 (comparison_operator -> GT .)
    TRUE            reduce using rule 54 (comparison_operator -> GT .)
    FALSE           reduce using rule 54 (comparison_operator -> GT .)
    LPAREN          reduce using rule 54 (comparison_operator -> GT .)


state 98

    (55) comparison_operator -> LTEQ .

    ID              reduce using rule 55 (comparison_operator -> LTEQ .)
    NUMBER          reduce using rule 55 (comparison_operator -> LTEQ .)
    STRING          reduce using rule 55 (comparison_operator -> LTEQ .)
    TRUE            reduce using rule 55 (comparison_operator -> LTEQ .)
    FALSE           reduce using rule 55 (comparison_operator -> LTEQ .)
    LPAREN          reduce using rule 55 (comparison_operator -> LTEQ .)


state 99

    (56) comparison_operator -> GTEQ .

    ID              reduce using rule 56 (comparison_operator -> GTEQ .)
    NUMBER          reduce using rule 56 (comparison_operator -> GTEQ .)
    STRING          reduce using rule 56 (comparison_operator -> GTEQ .)
    TRUE            reduce using rule 56 (comparison_operator -> GTEQ .)
    FALSE           reduce using rule 56 (comparison_operator -> GTEQ .)
    LPAREN          reduce using rule 56 (comparison_operator -> GTEQ .)


state 100

    (78) try_except -> BEGIN TRY statement_list EXCEPT . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    END             reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 115

state 101

    (61) while_stmt -> WHILE LPAREN condition RPAREN . BEGIN statement_list END

    BEGIN           shift and go to state 116


state 102

    (23) compound_types -> A ID ASSIGN LPAREN . data RPAREN
    (26) data -> . expression hi
    (27) data -> .
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 27 (data -> .)
    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    data                           shift and go to state 117
    expression                     shift and go to state 109
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 103

    (79) print -> ZOUT LPAREN y RPAREN .

    SEMICOLON       reduce using rule 79 (print -> ZOUT LPAREN y RPAREN .)


state 104

    (14) declaration -> VAR type ID ASSIGN L .

    SEMICOLON       reduce using rule 14 (declaration -> VAR type ID ASSIGN L .)


state 105

    (63) parameter_list -> type ID . optional_parameter_list
    (66) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (67) optional_parameter_list -> . COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (68) optional_parameter_list -> .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 68 (optional_parameter_list -> .)

    optional_parameter_list        shift and go to state 118

state 106

    (62) function_definition -> type ID LPAREN parameter_list RPAREN . BEGIN statement_list RETURN L SEMICOLON END

    BEGIN           shift and go to state 120


state 107

    (64) parameter_list -> A LSPAREN . type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID

    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27

    type                           shift and go to state 121

state 108

    (17) L -> ID LPAREN data . RPAREN

    RPAREN          shift and go to state 122


state 109

    (26) data -> expression . hi
    (70) expression -> expression . binary_operator term
    (28) hi -> . COMMA data
    (29) hi -> .
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 29 (hi -> .)
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    hi                             shift and go to state 123
    binary_operator                shift and go to state 36

state 110

    (32) F -> CON LPAREN factor . RPAREN

    RPAREN          shift and go to state 125


state 111

    (35) F -> LPAREN factor RPAREN .

    SEMICOLON       reduce using rule 35 (F -> LPAREN factor RPAREN .)
    RPAREN          reduce using rule 35 (F -> LPAREN factor RPAREN .)


state 112

    (39) F -> SUBSTR LPAREN data . RPAREN

    RPAREN          shift and go to state 126


state 113

    (50) if_stmnt -> IF LPAREN condition RPAREN BEGIN . statement_list END T K
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    END             reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 127

state 114

    (69) condition -> expression comparison_operator expression .
    (70) expression -> expression . binary_operator term
    (41) binary_operator -> . MINUS
    (42) binary_operator -> . MUL
    (43) binary_operator -> . PLUS
    (44) binary_operator -> . DIV
    (45) binary_operator -> . REM

    RPAREN          reduce using rule 69 (condition -> expression comparison_operator expression .)
    MINUS           shift and go to state 37
    MUL             shift and go to state 38
    PLUS            shift and go to state 39
    DIV             shift and go to state 40
    REM             shift and go to state 41

    binary_operator                shift and go to state 36

state 115

    (78) try_except -> BEGIN TRY statement_list EXCEPT statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    END             shift and go to state 128
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 116

    (61) while_stmt -> WHILE LPAREN condition RPAREN BEGIN . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    END             reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 129

state 117

    (23) compound_types -> A ID ASSIGN LPAREN data . RPAREN

    RPAREN          shift and go to state 130


state 118

    (63) parameter_list -> type ID optional_parameter_list .

    RPAREN          reduce using rule 63 (parameter_list -> type ID optional_parameter_list .)


state 119

    (66) optional_parameter_list -> COMMA . type ID optional_parameter_list
    (67) optional_parameter_list -> COMMA . A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (24) A -> . TUPLE
    (25) A -> . LIST

    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30

    type                           shift and go to state 131
    A                              shift and go to state 132

state 120

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN . statement_list RETURN L SEMICOLON END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    RETURN          reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 133

state 121

    (64) parameter_list -> A LSPAREN type . RSPAREN ID LSPAREN RSPAREN optional_parameter_list

    RSPAREN         shift and go to state 134


state 122

    (17) L -> ID LPAREN data RPAREN .

    SEMICOLON       reduce using rule 17 (L -> ID LPAREN data RPAREN .)


state 123

    (26) data -> expression hi .

    RPAREN          reduce using rule 26 (data -> expression hi .)


state 124

    (28) hi -> COMMA . data
    (26) data -> . expression hi
    (27) data -> .
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 27 (data -> .)
    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    data                           shift and go to state 135
    expression                     shift and go to state 109
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 125

    (32) F -> CON LPAREN factor RPAREN .

    SEMICOLON       reduce using rule 32 (F -> CON LPAREN factor RPAREN .)
    RPAREN          reduce using rule 32 (F -> CON LPAREN factor RPAREN .)


state 126

    (39) F -> SUBSTR LPAREN data RPAREN .

    SEMICOLON       reduce using rule 39 (F -> SUBSTR LPAREN data RPAREN .)
    RPAREN          reduce using rule 39 (F -> SUBSTR LPAREN data RPAREN .)


state 127

    (50) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list . END T K
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    END             shift and go to state 136
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 128

    (78) try_except -> BEGIN TRY statement_list EXCEPT statement_list END .

    SEMICOLON       reduce using rule 78 (try_except -> BEGIN TRY statement_list EXCEPT statement_list END .)


state 129

    (61) while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    END             shift and go to state 137
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 130

    (23) compound_types -> A ID ASSIGN LPAREN data RPAREN .

    SEMICOLON       reduce using rule 23 (compound_types -> A ID ASSIGN LPAREN data RPAREN .)


state 131

    (66) optional_parameter_list -> COMMA type . ID optional_parameter_list

    ID              shift and go to state 138


state 132

    (67) optional_parameter_list -> COMMA A . LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list

    LSPAREN         shift and go to state 139


state 133

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list . RETURN L SEMICOLON END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    RETURN          shift and go to state 140
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    type                           shift and go to state 15
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 134

    (64) parameter_list -> A LSPAREN type RSPAREN . ID LSPAREN RSPAREN optional_parameter_list

    ID              shift and go to state 141


state 135

    (28) hi -> COMMA data .

    RPAREN          reduce using rule 28 (hi -> COMMA data .)


state 136

    (50) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END . T K
    (57) T -> . ELIF LPAREN condition RPAREN BEGIN statement_list END T
    (58) T -> .

    ELIF            shift and go to state 143
    ELSE            reduce using rule 58 (T -> .)
    SEMICOLON       reduce using rule 58 (T -> .)

    T                              shift and go to state 142

state 137

    (61) while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END .

    SEMICOLON       reduce using rule 61 (while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END .)


state 138

    (66) optional_parameter_list -> COMMA type ID . optional_parameter_list
    (66) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (67) optional_parameter_list -> . COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (68) optional_parameter_list -> .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 68 (optional_parameter_list -> .)

    optional_parameter_list        shift and go to state 144

state 139

    (67) optional_parameter_list -> COMMA A LSPAREN . type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID

    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27

    type                           shift and go to state 145

state 140

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN . L SEMICOLON END
    (16) L -> . statement
    (17) L -> . ID LPAREN data RPAREN
    (18) L -> .
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 60
    SEMICOLON       reduce using rule 18 (L -> .)
    VAR             shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    type                           shift and go to state 15
    L                              shift and go to state 146
    statement                      shift and go to state 62
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 141

    (64) parameter_list -> A LSPAREN type RSPAREN ID . LSPAREN RSPAREN optional_parameter_list

    LSPAREN         shift and go to state 147


state 142

    (50) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T . K
    (59) K -> . ELSE BEGIN statement_list END
    (60) K -> .

    ELSE            shift and go to state 149
    SEMICOLON       reduce using rule 60 (K -> .)

    K                              shift and go to state 148

state 143

    (57) T -> ELIF . LPAREN condition RPAREN BEGIN statement_list END T

    LPAREN          shift and go to state 150


state 144

    (66) optional_parameter_list -> COMMA type ID optional_parameter_list .

    RPAREN          reduce using rule 66 (optional_parameter_list -> COMMA type ID optional_parameter_list .)


state 145

    (67) optional_parameter_list -> COMMA A LSPAREN type . RSPAREN ID LSPAREN RSPAREN optional_parameter_list

    RSPAREN         shift and go to state 151


state 146

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L . SEMICOLON END

    SEMICOLON       shift and go to state 152


state 147

    (64) parameter_list -> A LSPAREN type RSPAREN ID LSPAREN . RSPAREN optional_parameter_list

    RSPAREN         shift and go to state 153


state 148

    (50) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T K .

    SEMICOLON       reduce using rule 50 (if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T K .)


state 149

    (59) K -> ELSE . BEGIN statement_list END

    BEGIN           shift and go to state 154


state 150

    (57) T -> ELIF LPAREN . condition RPAREN BEGIN statement_list END T
    (69) condition -> . expression comparison_operator expression
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (48) term -> . factor
    (49) term -> . term unary_operator
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 49
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    condition                      shift and go to state 155
    expression                     shift and go to state 74
    term                           shift and go to state 21
    factor                         shift and go to state 28

state 151

    (67) optional_parameter_list -> COMMA A LSPAREN type RSPAREN . ID LSPAREN RSPAREN optional_parameter_list

    ID              shift and go to state 156


state 152

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON . END

    END             shift and go to state 157


state 153

    (64) parameter_list -> A LSPAREN type RSPAREN ID LSPAREN RSPAREN . optional_parameter_list
    (66) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (67) optional_parameter_list -> . COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (68) optional_parameter_list -> .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 68 (optional_parameter_list -> .)

    optional_parameter_list        shift and go to state 158

state 154

    (59) K -> ELSE BEGIN . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    END             reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 159

state 155

    (57) T -> ELIF LPAREN condition . RPAREN BEGIN statement_list END T

    RPAREN          shift and go to state 160


state 156

    (67) optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID . LSPAREN RSPAREN optional_parameter_list

    LSPAREN         shift and go to state 161


state 157

    (62) function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END .

    SEMICOLON       reduce using rule 62 (function_definition -> type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END .)


state 158

    (64) parameter_list -> A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list .

    RPAREN          reduce using rule 64 (parameter_list -> A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list .)


state 159

    (59) K -> ELSE BEGIN statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    END             shift and go to state 162
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 160

    (57) T -> ELIF LPAREN condition RPAREN . BEGIN statement_list END T

    BEGIN           shift and go to state 163


state 161

    (67) optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID LSPAREN . RSPAREN optional_parameter_list

    RSPAREN         shift and go to state 164


state 162

    (59) K -> ELSE BEGIN statement_list END .

    SEMICOLON       reduce using rule 59 (K -> ELSE BEGIN statement_list END .)


state 163

    (57) T -> ELIF LPAREN condition RPAREN BEGIN . statement_list END T
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> .

    END             reduce using rule 3 (statement_list -> .)
    VAR             reduce using rule 3 (statement_list -> .)
    ID              reduce using rule 3 (statement_list -> .)
    IF              reduce using rule 3 (statement_list -> .)
    WHILE           reduce using rule 3 (statement_list -> .)
    BEGIN           reduce using rule 3 (statement_list -> .)
    ZOUT            reduce using rule 3 (statement_list -> .)
    INT             reduce using rule 3 (statement_list -> .)
    BOOL            reduce using rule 3 (statement_list -> .)
    STR             reduce using rule 3 (statement_list -> .)
    VOID            reduce using rule 3 (statement_list -> .)
    TUPLE           reduce using rule 3 (statement_list -> .)
    LIST            reduce using rule 3 (statement_list -> .)
    NUMBER          reduce using rule 3 (statement_list -> .)
    STRING          reduce using rule 3 (statement_list -> .)
    TRUE            reduce using rule 3 (statement_list -> .)
    FALSE           reduce using rule 3 (statement_list -> .)
    LPAREN          reduce using rule 3 (statement_list -> .)

    statement_list                 shift and go to state 165

state 164

    (67) optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN . optional_parameter_list
    (66) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (67) optional_parameter_list -> . COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list
    (68) optional_parameter_list -> .

    COMMA           shift and go to state 119
    RPAREN          reduce using rule 68 (optional_parameter_list -> .)

    optional_parameter_list        shift and go to state 166

state 165

    (57) T -> ELIF LPAREN condition RPAREN BEGIN statement_list . END T
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_definition
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type ID ASSIGN L
    (15) assignment -> . ID ASSIGN L
    (50) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T K
    (61) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (62) function_definition -> . type ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN L SEMICOLON END
    (70) expression -> . expression binary_operator term
    (71) expression -> . term
    (23) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (30) compound_type_access -> . ID DOT F
    (31) compound_type_access -> . ID LSPAREN expression RSPAREN
    (78) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (79) print -> . ZOUT LPAREN y RPAREN
    (19) type -> . INT
    (20) type -> . BOOL
    (21) type -> . STR
    (22) type -> . VOID
    (48) term -> . factor
    (49) term -> . term unary_operator
    (24) A -> . TUPLE
    (25) A -> . LIST
    (72) factor -> . ID
    (73) factor -> . NUMBER
    (74) factor -> . STRING
    (75) factor -> . TRUE
    (76) factor -> . FALSE
    (77) factor -> . LPAREN expression RPAREN

    END             shift and go to state 167
    VAR             shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 23
    INT             shift and go to state 24
    BOOL            shift and go to state 25
    STR             shift and go to state 26
    VOID            shift and go to state 27
    TUPLE           shift and go to state 29
    LIST            shift and go to state 30
    NUMBER          shift and go to state 31
    STRING          shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    LPAREN          shift and go to state 18

    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    if_stmnt                       shift and go to state 6
    while_stmt                     shift and go to state 7
    function_definition            shift and go to state 8
    expression                     shift and go to state 9
    compound_types                 shift and go to state 10
    compound_type_access           shift and go to state 11
    try_except                     shift and go to state 12
    print                          shift and go to state 13
    type                           shift and go to state 15
    term                           shift and go to state 21
    A                              shift and go to state 22
    factor                         shift and go to state 28

state 166

    (67) optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list .

    RPAREN          reduce using rule 67 (optional_parameter_list -> COMMA A LSPAREN type RSPAREN ID LSPAREN RSPAREN optional_parameter_list .)


state 167

    (57) T -> ELIF LPAREN condition RPAREN BEGIN statement_list END . T
    (57) T -> . ELIF LPAREN condition RPAREN BEGIN statement_list END T
    (58) T -> .

    ELIF            shift and go to state 143
    ELSE            reduce using rule 58 (T -> .)
    SEMICOLON       reduce using rule 58 (T -> .)

    T                              shift and go to state 168

state 168

    (57) T -> ELIF LPAREN condition RPAREN BEGIN statement_list END T .

    ELSE            reduce using rule 57 (T -> ELIF LPAREN condition RPAREN BEGIN statement_list END T .)
    SEMICOLON       reduce using rule 57 (T -> ELIF LPAREN condition RPAREN BEGIN statement_list END T .)

