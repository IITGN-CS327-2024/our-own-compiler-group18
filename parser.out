Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statement_list
Rule 2     statement_list -> statement_list statement SEMICOLON
Rule 3     statement_list -> empty
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> if_stmnt
Rule 7     statement -> while_stmt
Rule 8     statement -> function_call
Rule 9     statement -> expression
Rule 10    statement -> compound_types
Rule 11    statement -> compound_type_access
Rule 12    statement -> try_except
Rule 13    statement -> print
Rule 14    declaration -> VAR type assignment
Rule 15    L -> statement
Rule 16    L -> ID LPAREN data RPAREN
Rule 17    assignment -> ID ASSIGN L
Rule 18    type -> INT
Rule 19    type -> BOOL
Rule 20    type -> STR
Rule 21    compound_types -> A ID ASSIGN LPAREN data RPAREN
Rule 22    A -> TUPLE
Rule 23    A -> LIST
Rule 24    data -> expression data
Rule 25    data -> COMMA data
Rule 26    data -> empty
Rule 27    compound_type_access -> ID DOT F
Rule 28    compound_type_access -> ID LSPAREN expression RSPAREN
Rule 29    F -> CON LPAREN factor RPAREN
Rule 30    F -> FRONT
Rule 31    F -> ADD LPAREN factor RPAREN
Rule 32    F -> REAR
Rule 33    F -> SIZE
Rule 34    F -> DELETE
Rule 35    F -> SUBSTR LPAREN factor COMMA factor RPAREN
Rule 36    F -> empty
Rule 37    if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T
Rule 38    T -> ELIF LPAREN condition RPAREN BEGIN statement_list END K
Rule 39    T -> empty
Rule 40    K -> ELSE BEGIN statement_list END
Rule 41    K -> empty
Rule 42    while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END
Rule 43    function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
Rule 44    parameter_list -> type ID optional_parameter_list
Rule 45    parameter_list -> empty
Rule 46    optional_parameter_list -> COMMA type ID optional_parameter_list
Rule 47    optional_parameter_list -> empty
Rule 48    condition -> expression comparison_operator expression
Rule 49    comparison_operator -> EQEQ
Rule 50    comparison_operator -> NOTEQ
Rule 51    comparison_operator -> LT
Rule 52    comparison_operator -> GT
Rule 53    comparison_operator -> LTEQ
Rule 54    comparison_operator -> GTEQ
Rule 55    expression -> term expression_tail
Rule 56    expression_tail -> binary_operator term expression_tail
Rule 57    expression_tail -> empty
Rule 58    binary_operator -> PLUS
Rule 59    binary_operator -> MINUS
Rule 60    binary_operator -> MUL
Rule 61    binary_operator -> DIV
Rule 62    binary_operator -> REM
Rule 63    term -> factor
Rule 64    term -> term unary_operator
Rule 65    unary_operator -> PLUSPLUS
Rule 66    unary_operator -> MINUSMINUS
Rule 67    factor -> ID
Rule 68    factor -> NUMBER
Rule 69    factor -> STRING
Rule 70    factor -> TRUE
Rule 71    factor -> FALSE
Rule 72    factor -> LPAREN expression RPAREN
Rule 73    try_except -> BEGIN TRY statement_list EXCEPT statement_list END
Rule 74    print -> ZOUT LPAREN y RPAREN
Rule 75    y -> expression
Rule 76    y -> compound_type_access
Rule 77    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 31
ASSIGN               : 17 21
BEGIN                : 37 38 40 42 43 73
BOOL                 : 19
COMMA                : 25 35 46
CON                  : 29
DELETE               : 34
DIV                  : 61
DOT                  : 27
ELIF                 : 38
ELSE                 : 40
END                  : 37 38 40 42 43 73
EQEQ                 : 49
EXCEPT               : 73
FALSE                : 71
FRONT                : 30
FUNC                 : 43
GT                   : 52
GTEQ                 : 54
ID                   : 16 17 21 27 28 43 44 46 67
IF                   : 37
INT                  : 18
LIST                 : 23
LPAREN               : 16 21 29 31 35 37 38 42 43 72 74
LSPAREN              : 28
LT                   : 51
LTEQ                 : 53
MINUS                : 59
MINUSMINUS           : 66
MUL                  : 60
NOTEQ                : 50
NUMBER               : 68
PLUS                 : 58
PLUSPLUS             : 65
REAR                 : 32
REM                  : 62
RETURN               : 43
RPAREN               : 16 21 29 31 35 37 38 42 43 72 74
RSPAREN              : 28
SEMICOLON            : 2 43
SIZE                 : 33
STR                  : 20
STRING               : 69
SUBSTR               : 35
TRUE                 : 70
TRY                  : 73
TUPLE                : 22
VAR                  : 14
WHILE                : 42
ZOUT                 : 74
error                : 

Nonterminals, with rules where they appear

A                    : 21
F                    : 27
K                    : 38
L                    : 17
T                    : 37
assignment           : 5 14
binary_operator      : 56
comparison_operator  : 48
compound_type_access : 11 76
compound_types       : 10
condition            : 37 38 42
data                 : 16 21 24 25 43
declaration          : 4
empty                : 3 26 36 39 41 45 47 57
expression           : 9 24 28 48 48 72 75
expression_tail      : 55 56
factor               : 29 31 35 35 63
function_call        : 8
if_stmnt             : 6
optional_parameter_list : 44 46
parameter_list       : 43
print                : 13
start                : 0
statement            : 2 15
statement_list       : 1 2 37 38 40 42 43 73 73
term                 : 55 56 64
try_except           : 12
type                 : 14 44 46
unary_operator       : 64
while_stmt           : 7
y                    : 74

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statement_list
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)
    $end            reduce using rule 77 (empty -> .)

    start                          shift and go to state 1
    statement_list                 shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> statement_list .
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (start -> statement_list .)
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 3

    (3) statement_list -> empty .

    VAR             reduce using rule 3 (statement_list -> empty .)
    ID              reduce using rule 3 (statement_list -> empty .)
    IF              reduce using rule 3 (statement_list -> empty .)
    WHILE           reduce using rule 3 (statement_list -> empty .)
    FUNC            reduce using rule 3 (statement_list -> empty .)
    BEGIN           reduce using rule 3 (statement_list -> empty .)
    ZOUT            reduce using rule 3 (statement_list -> empty .)
    TUPLE           reduce using rule 3 (statement_list -> empty .)
    LIST            reduce using rule 3 (statement_list -> empty .)
    NUMBER          reduce using rule 3 (statement_list -> empty .)
    STRING          reduce using rule 3 (statement_list -> empty .)
    TRUE            reduce using rule 3 (statement_list -> empty .)
    FALSE           reduce using rule 3 (statement_list -> empty .)
    LPAREN          reduce using rule 3 (statement_list -> empty .)
    $end            reduce using rule 3 (statement_list -> empty .)
    EXCEPT          reduce using rule 3 (statement_list -> empty .)
    END             reduce using rule 3 (statement_list -> empty .)
    RETURN          reduce using rule 3 (statement_list -> empty .)


state 4

    (2) statement_list -> statement_list statement . SEMICOLON

    SEMICOLON       shift and go to state 32


state 5

    (4) statement -> declaration .

    SEMICOLON       reduce using rule 4 (statement -> declaration .)


state 6

    (5) statement -> assignment .

    SEMICOLON       reduce using rule 5 (statement -> assignment .)


state 7

    (6) statement -> if_stmnt .

    SEMICOLON       reduce using rule 6 (statement -> if_stmnt .)


state 8

    (7) statement -> while_stmt .

    SEMICOLON       reduce using rule 7 (statement -> while_stmt .)


state 9

    (8) statement -> function_call .

    SEMICOLON       reduce using rule 8 (statement -> function_call .)


state 10

    (9) statement -> expression .

    SEMICOLON       reduce using rule 9 (statement -> expression .)


state 11

    (10) statement -> compound_types .

    SEMICOLON       reduce using rule 10 (statement -> compound_types .)


state 12

    (11) statement -> compound_type_access .

    SEMICOLON       reduce using rule 11 (statement -> compound_type_access .)


state 13

    (12) statement -> try_except .

    SEMICOLON       reduce using rule 12 (statement -> try_except .)


state 14

    (13) statement -> print .

    SEMICOLON       reduce using rule 13 (statement -> print .)


state 15

    (14) declaration -> VAR . type assignment
    (18) type -> . INT
    (19) type -> . BOOL
    (20) type -> . STR

    INT             shift and go to state 34
    BOOL            shift and go to state 35
    STR             shift and go to state 36

    type                           shift and go to state 33

state 16

    (17) assignment -> ID . ASSIGN L
    (27) compound_type_access -> ID . DOT F
    (28) compound_type_access -> ID . LSPAREN expression RSPAREN
    (67) factor -> ID .

    ASSIGN          shift and go to state 37
    DOT             shift and go to state 38
    LSPAREN         shift and go to state 39
    PLUSPLUS        reduce using rule 67 (factor -> ID .)
    MINUSMINUS      reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    MUL             reduce using rule 67 (factor -> ID .)
    DIV             reduce using rule 67 (factor -> ID .)
    REM             reduce using rule 67 (factor -> ID .)
    SEMICOLON       reduce using rule 67 (factor -> ID .)


state 17

    (37) if_stmnt -> IF . LPAREN condition RPAREN BEGIN statement_list END T

    LPAREN          shift and go to state 40


state 18

    (72) factor -> LPAREN . expression RPAREN
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    expression                     shift and go to state 41
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 19

    (73) try_except -> BEGIN . TRY statement_list EXCEPT statement_list END

    TRY             shift and go to state 43


state 20

    (42) while_stmt -> WHILE . LPAREN condition RPAREN BEGIN statement_list END

    LPAREN          shift and go to state 44


state 21

    (43) function_call -> FUNC . ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END

    ID              shift and go to state 45


state 22

    (55) expression -> term . expression_tail
    (64) term -> term . unary_operator
    (56) expression_tail -> . binary_operator term expression_tail
    (57) expression_tail -> . empty
    (65) unary_operator -> . PLUSPLUS
    (66) unary_operator -> . MINUSMINUS
    (58) binary_operator -> . PLUS
    (59) binary_operator -> . MINUS
    (60) binary_operator -> . MUL
    (61) binary_operator -> . DIV
    (62) binary_operator -> . REM
    (77) empty -> .

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    REM             shift and go to state 56
    SEMICOLON       reduce using rule 77 (empty -> .)
    RPAREN          reduce using rule 77 (empty -> .)
    RSPAREN         reduce using rule 77 (empty -> .)
    EQEQ            reduce using rule 77 (empty -> .)
    NOTEQ           reduce using rule 77 (empty -> .)
    LT              reduce using rule 77 (empty -> .)
    GT              reduce using rule 77 (empty -> .)
    LTEQ            reduce using rule 77 (empty -> .)
    GTEQ            reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    expression_tail                shift and go to state 46
    unary_operator                 shift and go to state 47
    binary_operator                shift and go to state 48
    empty                          shift and go to state 49

state 23

    (21) compound_types -> A . ID ASSIGN LPAREN data RPAREN

    ID              shift and go to state 57


state 24

    (74) print -> ZOUT . LPAREN y RPAREN

    LPAREN          shift and go to state 58


state 25

    (63) term -> factor .

    PLUSPLUS        reduce using rule 63 (term -> factor .)
    MINUSMINUS      reduce using rule 63 (term -> factor .)
    PLUS            reduce using rule 63 (term -> factor .)
    MINUS           reduce using rule 63 (term -> factor .)
    MUL             reduce using rule 63 (term -> factor .)
    DIV             reduce using rule 63 (term -> factor .)
    REM             reduce using rule 63 (term -> factor .)
    SEMICOLON       reduce using rule 63 (term -> factor .)
    RPAREN          reduce using rule 63 (term -> factor .)
    RSPAREN         reduce using rule 63 (term -> factor .)
    EQEQ            reduce using rule 63 (term -> factor .)
    NOTEQ           reduce using rule 63 (term -> factor .)
    LT              reduce using rule 63 (term -> factor .)
    GT              reduce using rule 63 (term -> factor .)
    LTEQ            reduce using rule 63 (term -> factor .)
    GTEQ            reduce using rule 63 (term -> factor .)
    COMMA           reduce using rule 63 (term -> factor .)
    ID              reduce using rule 63 (term -> factor .)
    NUMBER          reduce using rule 63 (term -> factor .)
    STRING          reduce using rule 63 (term -> factor .)
    TRUE            reduce using rule 63 (term -> factor .)
    FALSE           reduce using rule 63 (term -> factor .)
    LPAREN          reduce using rule 63 (term -> factor .)


state 26

    (22) A -> TUPLE .

    ID              reduce using rule 22 (A -> TUPLE .)


state 27

    (23) A -> LIST .

    ID              reduce using rule 23 (A -> LIST .)


state 28

    (68) factor -> NUMBER .

    PLUSPLUS        reduce using rule 68 (factor -> NUMBER .)
    MINUSMINUS      reduce using rule 68 (factor -> NUMBER .)
    PLUS            reduce using rule 68 (factor -> NUMBER .)
    MINUS           reduce using rule 68 (factor -> NUMBER .)
    MUL             reduce using rule 68 (factor -> NUMBER .)
    DIV             reduce using rule 68 (factor -> NUMBER .)
    REM             reduce using rule 68 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 68 (factor -> NUMBER .)
    RPAREN          reduce using rule 68 (factor -> NUMBER .)
    RSPAREN         reduce using rule 68 (factor -> NUMBER .)
    EQEQ            reduce using rule 68 (factor -> NUMBER .)
    NOTEQ           reduce using rule 68 (factor -> NUMBER .)
    LT              reduce using rule 68 (factor -> NUMBER .)
    GT              reduce using rule 68 (factor -> NUMBER .)
    LTEQ            reduce using rule 68 (factor -> NUMBER .)
    GTEQ            reduce using rule 68 (factor -> NUMBER .)
    COMMA           reduce using rule 68 (factor -> NUMBER .)
    ID              reduce using rule 68 (factor -> NUMBER .)
    NUMBER          reduce using rule 68 (factor -> NUMBER .)
    STRING          reduce using rule 68 (factor -> NUMBER .)
    TRUE            reduce using rule 68 (factor -> NUMBER .)
    FALSE           reduce using rule 68 (factor -> NUMBER .)
    LPAREN          reduce using rule 68 (factor -> NUMBER .)


state 29

    (69) factor -> STRING .

    PLUSPLUS        reduce using rule 69 (factor -> STRING .)
    MINUSMINUS      reduce using rule 69 (factor -> STRING .)
    PLUS            reduce using rule 69 (factor -> STRING .)
    MINUS           reduce using rule 69 (factor -> STRING .)
    MUL             reduce using rule 69 (factor -> STRING .)
    DIV             reduce using rule 69 (factor -> STRING .)
    REM             reduce using rule 69 (factor -> STRING .)
    SEMICOLON       reduce using rule 69 (factor -> STRING .)
    RPAREN          reduce using rule 69 (factor -> STRING .)
    RSPAREN         reduce using rule 69 (factor -> STRING .)
    EQEQ            reduce using rule 69 (factor -> STRING .)
    NOTEQ           reduce using rule 69 (factor -> STRING .)
    LT              reduce using rule 69 (factor -> STRING .)
    GT              reduce using rule 69 (factor -> STRING .)
    LTEQ            reduce using rule 69 (factor -> STRING .)
    GTEQ            reduce using rule 69 (factor -> STRING .)
    COMMA           reduce using rule 69 (factor -> STRING .)
    ID              reduce using rule 69 (factor -> STRING .)
    NUMBER          reduce using rule 69 (factor -> STRING .)
    STRING          reduce using rule 69 (factor -> STRING .)
    TRUE            reduce using rule 69 (factor -> STRING .)
    FALSE           reduce using rule 69 (factor -> STRING .)
    LPAREN          reduce using rule 69 (factor -> STRING .)


state 30

    (70) factor -> TRUE .

    PLUSPLUS        reduce using rule 70 (factor -> TRUE .)
    MINUSMINUS      reduce using rule 70 (factor -> TRUE .)
    PLUS            reduce using rule 70 (factor -> TRUE .)
    MINUS           reduce using rule 70 (factor -> TRUE .)
    MUL             reduce using rule 70 (factor -> TRUE .)
    DIV             reduce using rule 70 (factor -> TRUE .)
    REM             reduce using rule 70 (factor -> TRUE .)
    SEMICOLON       reduce using rule 70 (factor -> TRUE .)
    RPAREN          reduce using rule 70 (factor -> TRUE .)
    RSPAREN         reduce using rule 70 (factor -> TRUE .)
    EQEQ            reduce using rule 70 (factor -> TRUE .)
    NOTEQ           reduce using rule 70 (factor -> TRUE .)
    LT              reduce using rule 70 (factor -> TRUE .)
    GT              reduce using rule 70 (factor -> TRUE .)
    LTEQ            reduce using rule 70 (factor -> TRUE .)
    GTEQ            reduce using rule 70 (factor -> TRUE .)
    COMMA           reduce using rule 70 (factor -> TRUE .)
    ID              reduce using rule 70 (factor -> TRUE .)
    NUMBER          reduce using rule 70 (factor -> TRUE .)
    STRING          reduce using rule 70 (factor -> TRUE .)
    TRUE            reduce using rule 70 (factor -> TRUE .)
    FALSE           reduce using rule 70 (factor -> TRUE .)
    LPAREN          reduce using rule 70 (factor -> TRUE .)


state 31

    (71) factor -> FALSE .

    PLUSPLUS        reduce using rule 71 (factor -> FALSE .)
    MINUSMINUS      reduce using rule 71 (factor -> FALSE .)
    PLUS            reduce using rule 71 (factor -> FALSE .)
    MINUS           reduce using rule 71 (factor -> FALSE .)
    MUL             reduce using rule 71 (factor -> FALSE .)
    DIV             reduce using rule 71 (factor -> FALSE .)
    REM             reduce using rule 71 (factor -> FALSE .)
    SEMICOLON       reduce using rule 71 (factor -> FALSE .)
    RPAREN          reduce using rule 71 (factor -> FALSE .)
    RSPAREN         reduce using rule 71 (factor -> FALSE .)
    EQEQ            reduce using rule 71 (factor -> FALSE .)
    NOTEQ           reduce using rule 71 (factor -> FALSE .)
    LT              reduce using rule 71 (factor -> FALSE .)
    GT              reduce using rule 71 (factor -> FALSE .)
    LTEQ            reduce using rule 71 (factor -> FALSE .)
    GTEQ            reduce using rule 71 (factor -> FALSE .)
    COMMA           reduce using rule 71 (factor -> FALSE .)
    ID              reduce using rule 71 (factor -> FALSE .)
    NUMBER          reduce using rule 71 (factor -> FALSE .)
    STRING          reduce using rule 71 (factor -> FALSE .)
    TRUE            reduce using rule 71 (factor -> FALSE .)
    FALSE           reduce using rule 71 (factor -> FALSE .)
    LPAREN          reduce using rule 71 (factor -> FALSE .)


state 32

    (2) statement_list -> statement_list statement SEMICOLON .

    VAR             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    ID              reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    IF              reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    FUNC            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    BEGIN           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    ZOUT            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    TUPLE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    LIST            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    TRUE            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    FALSE           reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    $end            reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    EXCEPT          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    END             reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement SEMICOLON .)


state 33

    (14) declaration -> VAR type . assignment
    (17) assignment -> . ID ASSIGN L

    ID              shift and go to state 60

    assignment                     shift and go to state 59

state 34

    (18) type -> INT .

    ID              reduce using rule 18 (type -> INT .)


state 35

    (19) type -> BOOL .

    ID              reduce using rule 19 (type -> BOOL .)


state 36

    (20) type -> STR .

    ID              reduce using rule 20 (type -> STR .)


state 37

    (17) assignment -> ID ASSIGN . L
    (15) L -> . statement
    (16) L -> . ID LPAREN data RPAREN
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 61
    VAR             shift and go to state 15
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    L                              shift and go to state 62
    statement                      shift and go to state 63
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 38

    (27) compound_type_access -> ID DOT . F
    (29) F -> . CON LPAREN factor RPAREN
    (30) F -> . FRONT
    (31) F -> . ADD LPAREN factor RPAREN
    (32) F -> . REAR
    (33) F -> . SIZE
    (34) F -> . DELETE
    (35) F -> . SUBSTR LPAREN factor COMMA factor RPAREN
    (36) F -> . empty
    (77) empty -> .

    CON             shift and go to state 65
    FRONT           shift and go to state 66
    ADD             shift and go to state 67
    REAR            shift and go to state 68
    SIZE            shift and go to state 69
    DELETE          shift and go to state 70
    SUBSTR          shift and go to state 71
    SEMICOLON       reduce using rule 77 (empty -> .)
    RPAREN          reduce using rule 77 (empty -> .)

    F                              shift and go to state 64
    empty                          shift and go to state 72

state 39

    (28) compound_type_access -> ID LSPAREN . expression RSPAREN
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    expression                     shift and go to state 73
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 40

    (37) if_stmnt -> IF LPAREN . condition RPAREN BEGIN statement_list END T
    (48) condition -> . expression comparison_operator expression
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    condition                      shift and go to state 74
    expression                     shift and go to state 75
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 41

    (72) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 76


state 42

    (67) factor -> ID .

    PLUSPLUS        reduce using rule 67 (factor -> ID .)
    MINUSMINUS      reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    MUL             reduce using rule 67 (factor -> ID .)
    DIV             reduce using rule 67 (factor -> ID .)
    REM             reduce using rule 67 (factor -> ID .)
    RPAREN          reduce using rule 67 (factor -> ID .)
    RSPAREN         reduce using rule 67 (factor -> ID .)
    EQEQ            reduce using rule 67 (factor -> ID .)
    NOTEQ           reduce using rule 67 (factor -> ID .)
    LT              reduce using rule 67 (factor -> ID .)
    GT              reduce using rule 67 (factor -> ID .)
    LTEQ            reduce using rule 67 (factor -> ID .)
    GTEQ            reduce using rule 67 (factor -> ID .)
    SEMICOLON       reduce using rule 67 (factor -> ID .)
    COMMA           reduce using rule 67 (factor -> ID .)
    ID              reduce using rule 67 (factor -> ID .)
    NUMBER          reduce using rule 67 (factor -> ID .)
    STRING          reduce using rule 67 (factor -> ID .)
    TRUE            reduce using rule 67 (factor -> ID .)
    FALSE           reduce using rule 67 (factor -> ID .)
    LPAREN          reduce using rule 67 (factor -> ID .)


state 43

    (73) try_except -> BEGIN TRY . statement_list EXCEPT statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    EXCEPT          reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 77
    empty                          shift and go to state 3

state 44

    (42) while_stmt -> WHILE LPAREN . condition RPAREN BEGIN statement_list END
    (48) condition -> . expression comparison_operator expression
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    condition                      shift and go to state 78
    expression                     shift and go to state 75
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 45

    (43) function_call -> FUNC ID . LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END

    LPAREN          shift and go to state 79


state 46

    (55) expression -> term expression_tail .

    SEMICOLON       reduce using rule 55 (expression -> term expression_tail .)
    RPAREN          reduce using rule 55 (expression -> term expression_tail .)
    RSPAREN         reduce using rule 55 (expression -> term expression_tail .)
    EQEQ            reduce using rule 55 (expression -> term expression_tail .)
    NOTEQ           reduce using rule 55 (expression -> term expression_tail .)
    LT              reduce using rule 55 (expression -> term expression_tail .)
    GT              reduce using rule 55 (expression -> term expression_tail .)
    LTEQ            reduce using rule 55 (expression -> term expression_tail .)
    GTEQ            reduce using rule 55 (expression -> term expression_tail .)
    COMMA           reduce using rule 55 (expression -> term expression_tail .)
    ID              reduce using rule 55 (expression -> term expression_tail .)
    NUMBER          reduce using rule 55 (expression -> term expression_tail .)
    STRING          reduce using rule 55 (expression -> term expression_tail .)
    TRUE            reduce using rule 55 (expression -> term expression_tail .)
    FALSE           reduce using rule 55 (expression -> term expression_tail .)
    LPAREN          reduce using rule 55 (expression -> term expression_tail .)


state 47

    (64) term -> term unary_operator .

    PLUSPLUS        reduce using rule 64 (term -> term unary_operator .)
    MINUSMINUS      reduce using rule 64 (term -> term unary_operator .)
    PLUS            reduce using rule 64 (term -> term unary_operator .)
    MINUS           reduce using rule 64 (term -> term unary_operator .)
    MUL             reduce using rule 64 (term -> term unary_operator .)
    DIV             reduce using rule 64 (term -> term unary_operator .)
    REM             reduce using rule 64 (term -> term unary_operator .)
    SEMICOLON       reduce using rule 64 (term -> term unary_operator .)
    RPAREN          reduce using rule 64 (term -> term unary_operator .)
    RSPAREN         reduce using rule 64 (term -> term unary_operator .)
    EQEQ            reduce using rule 64 (term -> term unary_operator .)
    NOTEQ           reduce using rule 64 (term -> term unary_operator .)
    LT              reduce using rule 64 (term -> term unary_operator .)
    GT              reduce using rule 64 (term -> term unary_operator .)
    LTEQ            reduce using rule 64 (term -> term unary_operator .)
    GTEQ            reduce using rule 64 (term -> term unary_operator .)
    COMMA           reduce using rule 64 (term -> term unary_operator .)
    ID              reduce using rule 64 (term -> term unary_operator .)
    NUMBER          reduce using rule 64 (term -> term unary_operator .)
    STRING          reduce using rule 64 (term -> term unary_operator .)
    TRUE            reduce using rule 64 (term -> term unary_operator .)
    FALSE           reduce using rule 64 (term -> term unary_operator .)
    LPAREN          reduce using rule 64 (term -> term unary_operator .)


state 48

    (56) expression_tail -> binary_operator . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    term                           shift and go to state 80
    factor                         shift and go to state 25

state 49

    (57) expression_tail -> empty .

    SEMICOLON       reduce using rule 57 (expression_tail -> empty .)
    RPAREN          reduce using rule 57 (expression_tail -> empty .)
    RSPAREN         reduce using rule 57 (expression_tail -> empty .)
    EQEQ            reduce using rule 57 (expression_tail -> empty .)
    NOTEQ           reduce using rule 57 (expression_tail -> empty .)
    LT              reduce using rule 57 (expression_tail -> empty .)
    GT              reduce using rule 57 (expression_tail -> empty .)
    LTEQ            reduce using rule 57 (expression_tail -> empty .)
    GTEQ            reduce using rule 57 (expression_tail -> empty .)
    COMMA           reduce using rule 57 (expression_tail -> empty .)
    ID              reduce using rule 57 (expression_tail -> empty .)
    NUMBER          reduce using rule 57 (expression_tail -> empty .)
    STRING          reduce using rule 57 (expression_tail -> empty .)
    TRUE            reduce using rule 57 (expression_tail -> empty .)
    FALSE           reduce using rule 57 (expression_tail -> empty .)
    LPAREN          reduce using rule 57 (expression_tail -> empty .)


state 50

    (65) unary_operator -> PLUSPLUS .

    PLUSPLUS        reduce using rule 65 (unary_operator -> PLUSPLUS .)
    MINUSMINUS      reduce using rule 65 (unary_operator -> PLUSPLUS .)
    PLUS            reduce using rule 65 (unary_operator -> PLUSPLUS .)
    MINUS           reduce using rule 65 (unary_operator -> PLUSPLUS .)
    MUL             reduce using rule 65 (unary_operator -> PLUSPLUS .)
    DIV             reduce using rule 65 (unary_operator -> PLUSPLUS .)
    REM             reduce using rule 65 (unary_operator -> PLUSPLUS .)
    SEMICOLON       reduce using rule 65 (unary_operator -> PLUSPLUS .)
    RPAREN          reduce using rule 65 (unary_operator -> PLUSPLUS .)
    RSPAREN         reduce using rule 65 (unary_operator -> PLUSPLUS .)
    EQEQ            reduce using rule 65 (unary_operator -> PLUSPLUS .)
    NOTEQ           reduce using rule 65 (unary_operator -> PLUSPLUS .)
    LT              reduce using rule 65 (unary_operator -> PLUSPLUS .)
    GT              reduce using rule 65 (unary_operator -> PLUSPLUS .)
    LTEQ            reduce using rule 65 (unary_operator -> PLUSPLUS .)
    GTEQ            reduce using rule 65 (unary_operator -> PLUSPLUS .)
    COMMA           reduce using rule 65 (unary_operator -> PLUSPLUS .)
    ID              reduce using rule 65 (unary_operator -> PLUSPLUS .)
    NUMBER          reduce using rule 65 (unary_operator -> PLUSPLUS .)
    STRING          reduce using rule 65 (unary_operator -> PLUSPLUS .)
    TRUE            reduce using rule 65 (unary_operator -> PLUSPLUS .)
    FALSE           reduce using rule 65 (unary_operator -> PLUSPLUS .)
    LPAREN          reduce using rule 65 (unary_operator -> PLUSPLUS .)


state 51

    (66) unary_operator -> MINUSMINUS .

    PLUSPLUS        reduce using rule 66 (unary_operator -> MINUSMINUS .)
    MINUSMINUS      reduce using rule 66 (unary_operator -> MINUSMINUS .)
    PLUS            reduce using rule 66 (unary_operator -> MINUSMINUS .)
    MINUS           reduce using rule 66 (unary_operator -> MINUSMINUS .)
    MUL             reduce using rule 66 (unary_operator -> MINUSMINUS .)
    DIV             reduce using rule 66 (unary_operator -> MINUSMINUS .)
    REM             reduce using rule 66 (unary_operator -> MINUSMINUS .)
    SEMICOLON       reduce using rule 66 (unary_operator -> MINUSMINUS .)
    RPAREN          reduce using rule 66 (unary_operator -> MINUSMINUS .)
    RSPAREN         reduce using rule 66 (unary_operator -> MINUSMINUS .)
    EQEQ            reduce using rule 66 (unary_operator -> MINUSMINUS .)
    NOTEQ           reduce using rule 66 (unary_operator -> MINUSMINUS .)
    LT              reduce using rule 66 (unary_operator -> MINUSMINUS .)
    GT              reduce using rule 66 (unary_operator -> MINUSMINUS .)
    LTEQ            reduce using rule 66 (unary_operator -> MINUSMINUS .)
    GTEQ            reduce using rule 66 (unary_operator -> MINUSMINUS .)
    COMMA           reduce using rule 66 (unary_operator -> MINUSMINUS .)
    ID              reduce using rule 66 (unary_operator -> MINUSMINUS .)
    NUMBER          reduce using rule 66 (unary_operator -> MINUSMINUS .)
    STRING          reduce using rule 66 (unary_operator -> MINUSMINUS .)
    TRUE            reduce using rule 66 (unary_operator -> MINUSMINUS .)
    FALSE           reduce using rule 66 (unary_operator -> MINUSMINUS .)
    LPAREN          reduce using rule 66 (unary_operator -> MINUSMINUS .)


state 52

    (58) binary_operator -> PLUS .

    ID              reduce using rule 58 (binary_operator -> PLUS .)
    NUMBER          reduce using rule 58 (binary_operator -> PLUS .)
    STRING          reduce using rule 58 (binary_operator -> PLUS .)
    TRUE            reduce using rule 58 (binary_operator -> PLUS .)
    FALSE           reduce using rule 58 (binary_operator -> PLUS .)
    LPAREN          reduce using rule 58 (binary_operator -> PLUS .)


state 53

    (59) binary_operator -> MINUS .

    ID              reduce using rule 59 (binary_operator -> MINUS .)
    NUMBER          reduce using rule 59 (binary_operator -> MINUS .)
    STRING          reduce using rule 59 (binary_operator -> MINUS .)
    TRUE            reduce using rule 59 (binary_operator -> MINUS .)
    FALSE           reduce using rule 59 (binary_operator -> MINUS .)
    LPAREN          reduce using rule 59 (binary_operator -> MINUS .)


state 54

    (60) binary_operator -> MUL .

    ID              reduce using rule 60 (binary_operator -> MUL .)
    NUMBER          reduce using rule 60 (binary_operator -> MUL .)
    STRING          reduce using rule 60 (binary_operator -> MUL .)
    TRUE            reduce using rule 60 (binary_operator -> MUL .)
    FALSE           reduce using rule 60 (binary_operator -> MUL .)
    LPAREN          reduce using rule 60 (binary_operator -> MUL .)


state 55

    (61) binary_operator -> DIV .

    ID              reduce using rule 61 (binary_operator -> DIV .)
    NUMBER          reduce using rule 61 (binary_operator -> DIV .)
    STRING          reduce using rule 61 (binary_operator -> DIV .)
    TRUE            reduce using rule 61 (binary_operator -> DIV .)
    FALSE           reduce using rule 61 (binary_operator -> DIV .)
    LPAREN          reduce using rule 61 (binary_operator -> DIV .)


state 56

    (62) binary_operator -> REM .

    ID              reduce using rule 62 (binary_operator -> REM .)
    NUMBER          reduce using rule 62 (binary_operator -> REM .)
    STRING          reduce using rule 62 (binary_operator -> REM .)
    TRUE            reduce using rule 62 (binary_operator -> REM .)
    FALSE           reduce using rule 62 (binary_operator -> REM .)
    LPAREN          reduce using rule 62 (binary_operator -> REM .)


state 57

    (21) compound_types -> A ID . ASSIGN LPAREN data RPAREN

    ASSIGN          shift and go to state 81


state 58

    (74) print -> ZOUT LPAREN . y RPAREN
    (75) y -> . expression
    (76) y -> . compound_type_access
    (55) expression -> . term expression_tail
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 85
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    y                              shift and go to state 82
    expression                     shift and go to state 83
    compound_type_access           shift and go to state 84
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 59

    (14) declaration -> VAR type assignment .

    SEMICOLON       reduce using rule 14 (declaration -> VAR type assignment .)


state 60

    (17) assignment -> ID . ASSIGN L

    ASSIGN          shift and go to state 37


state 61

    (16) L -> ID . LPAREN data RPAREN
    (17) assignment -> ID . ASSIGN L
    (27) compound_type_access -> ID . DOT F
    (28) compound_type_access -> ID . LSPAREN expression RSPAREN
    (67) factor -> ID .

    LPAREN          shift and go to state 86
    ASSIGN          shift and go to state 37
    DOT             shift and go to state 38
    LSPAREN         shift and go to state 39
    PLUSPLUS        reduce using rule 67 (factor -> ID .)
    MINUSMINUS      reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    MUL             reduce using rule 67 (factor -> ID .)
    DIV             reduce using rule 67 (factor -> ID .)
    REM             reduce using rule 67 (factor -> ID .)
    SEMICOLON       reduce using rule 67 (factor -> ID .)


state 62

    (17) assignment -> ID ASSIGN L .

    SEMICOLON       reduce using rule 17 (assignment -> ID ASSIGN L .)


state 63

    (15) L -> statement .

    SEMICOLON       reduce using rule 15 (L -> statement .)


state 64

    (27) compound_type_access -> ID DOT F .

    SEMICOLON       reduce using rule 27 (compound_type_access -> ID DOT F .)
    RPAREN          reduce using rule 27 (compound_type_access -> ID DOT F .)


state 65

    (29) F -> CON . LPAREN factor RPAREN

    LPAREN          shift and go to state 87


state 66

    (30) F -> FRONT .

    SEMICOLON       reduce using rule 30 (F -> FRONT .)
    RPAREN          reduce using rule 30 (F -> FRONT .)


state 67

    (31) F -> ADD . LPAREN factor RPAREN

    LPAREN          shift and go to state 88


state 68

    (32) F -> REAR .

    SEMICOLON       reduce using rule 32 (F -> REAR .)
    RPAREN          reduce using rule 32 (F -> REAR .)


state 69

    (33) F -> SIZE .

    SEMICOLON       reduce using rule 33 (F -> SIZE .)
    RPAREN          reduce using rule 33 (F -> SIZE .)


state 70

    (34) F -> DELETE .

    SEMICOLON       reduce using rule 34 (F -> DELETE .)
    RPAREN          reduce using rule 34 (F -> DELETE .)


state 71

    (35) F -> SUBSTR . LPAREN factor COMMA factor RPAREN

    LPAREN          shift and go to state 89


state 72

    (36) F -> empty .

    SEMICOLON       reduce using rule 36 (F -> empty .)
    RPAREN          reduce using rule 36 (F -> empty .)


state 73

    (28) compound_type_access -> ID LSPAREN expression . RSPAREN

    RSPAREN         shift and go to state 90


state 74

    (37) if_stmnt -> IF LPAREN condition . RPAREN BEGIN statement_list END T

    RPAREN          shift and go to state 91


state 75

    (48) condition -> expression . comparison_operator expression
    (49) comparison_operator -> . EQEQ
    (50) comparison_operator -> . NOTEQ
    (51) comparison_operator -> . LT
    (52) comparison_operator -> . GT
    (53) comparison_operator -> . LTEQ
    (54) comparison_operator -> . GTEQ

    EQEQ            shift and go to state 93
    NOTEQ           shift and go to state 94
    LT              shift and go to state 95
    GT              shift and go to state 96
    LTEQ            shift and go to state 97
    GTEQ            shift and go to state 98

    comparison_operator            shift and go to state 92

state 76

    (72) factor -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MUL             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    REM             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RSPAREN         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    EQEQ            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    STRING          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)


state 77

    (73) try_except -> BEGIN TRY statement_list . EXCEPT statement_list END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    EXCEPT          shift and go to state 99
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 78

    (42) while_stmt -> WHILE LPAREN condition . RPAREN BEGIN statement_list END

    RPAREN          shift and go to state 100


state 79

    (43) function_call -> FUNC ID LPAREN . parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (44) parameter_list -> . type ID optional_parameter_list
    (45) parameter_list -> . empty
    (18) type -> . INT
    (19) type -> . BOOL
    (20) type -> . STR
    (77) empty -> .

    INT             shift and go to state 34
    BOOL            shift and go to state 35
    STR             shift and go to state 36
    RPAREN          reduce using rule 77 (empty -> .)

    parameter_list                 shift and go to state 101
    type                           shift and go to state 102
    empty                          shift and go to state 103

state 80

    (56) expression_tail -> binary_operator term . expression_tail
    (64) term -> term . unary_operator
    (56) expression_tail -> . binary_operator term expression_tail
    (57) expression_tail -> . empty
    (65) unary_operator -> . PLUSPLUS
    (66) unary_operator -> . MINUSMINUS
    (58) binary_operator -> . PLUS
    (59) binary_operator -> . MINUS
    (60) binary_operator -> . MUL
    (61) binary_operator -> . DIV
    (62) binary_operator -> . REM
    (77) empty -> .

    PLUSPLUS        shift and go to state 50
    MINUSMINUS      shift and go to state 51
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53
    MUL             shift and go to state 54
    DIV             shift and go to state 55
    REM             shift and go to state 56
    SEMICOLON       reduce using rule 77 (empty -> .)
    RPAREN          reduce using rule 77 (empty -> .)
    RSPAREN         reduce using rule 77 (empty -> .)
    EQEQ            reduce using rule 77 (empty -> .)
    NOTEQ           reduce using rule 77 (empty -> .)
    LT              reduce using rule 77 (empty -> .)
    GT              reduce using rule 77 (empty -> .)
    LTEQ            reduce using rule 77 (empty -> .)
    GTEQ            reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    binary_operator                shift and go to state 48
    expression_tail                shift and go to state 104
    unary_operator                 shift and go to state 47
    empty                          shift and go to state 49

state 81

    (21) compound_types -> A ID ASSIGN . LPAREN data RPAREN

    LPAREN          shift and go to state 105


state 82

    (74) print -> ZOUT LPAREN y . RPAREN

    RPAREN          shift and go to state 106


state 83

    (75) y -> expression .

    RPAREN          reduce using rule 75 (y -> expression .)


state 84

    (76) y -> compound_type_access .

    RPAREN          reduce using rule 76 (y -> compound_type_access .)


state 85

    (27) compound_type_access -> ID . DOT F
    (28) compound_type_access -> ID . LSPAREN expression RSPAREN
    (67) factor -> ID .

    DOT             shift and go to state 38
    LSPAREN         shift and go to state 39
    PLUSPLUS        reduce using rule 67 (factor -> ID .)
    MINUSMINUS      reduce using rule 67 (factor -> ID .)
    PLUS            reduce using rule 67 (factor -> ID .)
    MINUS           reduce using rule 67 (factor -> ID .)
    MUL             reduce using rule 67 (factor -> ID .)
    DIV             reduce using rule 67 (factor -> ID .)
    REM             reduce using rule 67 (factor -> ID .)
    RPAREN          reduce using rule 67 (factor -> ID .)


state 86

    (16) L -> ID LPAREN . data RPAREN
    (24) data -> . expression data
    (25) data -> . COMMA data
    (26) data -> . empty
    (55) expression -> . term expression_tail
    (77) empty -> .
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 77 (empty -> .)
    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    data                           shift and go to state 107
    expression                     shift and go to state 108
    empty                          shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 87

    (29) F -> CON LPAREN . factor RPAREN
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    factor                         shift and go to state 111

state 88

    (31) F -> ADD LPAREN . factor RPAREN
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    factor                         shift and go to state 112

state 89

    (35) F -> SUBSTR LPAREN . factor COMMA factor RPAREN
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    factor                         shift and go to state 113

state 90

    (28) compound_type_access -> ID LSPAREN expression RSPAREN .

    SEMICOLON       reduce using rule 28 (compound_type_access -> ID LSPAREN expression RSPAREN .)
    RPAREN          reduce using rule 28 (compound_type_access -> ID LSPAREN expression RSPAREN .)


state 91

    (37) if_stmnt -> IF LPAREN condition RPAREN . BEGIN statement_list END T

    BEGIN           shift and go to state 114


state 92

    (48) condition -> expression comparison_operator . expression
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    expression                     shift and go to state 115
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 93

    (49) comparison_operator -> EQEQ .

    ID              reduce using rule 49 (comparison_operator -> EQEQ .)
    NUMBER          reduce using rule 49 (comparison_operator -> EQEQ .)
    STRING          reduce using rule 49 (comparison_operator -> EQEQ .)
    TRUE            reduce using rule 49 (comparison_operator -> EQEQ .)
    FALSE           reduce using rule 49 (comparison_operator -> EQEQ .)
    LPAREN          reduce using rule 49 (comparison_operator -> EQEQ .)


state 94

    (50) comparison_operator -> NOTEQ .

    ID              reduce using rule 50 (comparison_operator -> NOTEQ .)
    NUMBER          reduce using rule 50 (comparison_operator -> NOTEQ .)
    STRING          reduce using rule 50 (comparison_operator -> NOTEQ .)
    TRUE            reduce using rule 50 (comparison_operator -> NOTEQ .)
    FALSE           reduce using rule 50 (comparison_operator -> NOTEQ .)
    LPAREN          reduce using rule 50 (comparison_operator -> NOTEQ .)


state 95

    (51) comparison_operator -> LT .

    ID              reduce using rule 51 (comparison_operator -> LT .)
    NUMBER          reduce using rule 51 (comparison_operator -> LT .)
    STRING          reduce using rule 51 (comparison_operator -> LT .)
    TRUE            reduce using rule 51 (comparison_operator -> LT .)
    FALSE           reduce using rule 51 (comparison_operator -> LT .)
    LPAREN          reduce using rule 51 (comparison_operator -> LT .)


state 96

    (52) comparison_operator -> GT .

    ID              reduce using rule 52 (comparison_operator -> GT .)
    NUMBER          reduce using rule 52 (comparison_operator -> GT .)
    STRING          reduce using rule 52 (comparison_operator -> GT .)
    TRUE            reduce using rule 52 (comparison_operator -> GT .)
    FALSE           reduce using rule 52 (comparison_operator -> GT .)
    LPAREN          reduce using rule 52 (comparison_operator -> GT .)


state 97

    (53) comparison_operator -> LTEQ .

    ID              reduce using rule 53 (comparison_operator -> LTEQ .)
    NUMBER          reduce using rule 53 (comparison_operator -> LTEQ .)
    STRING          reduce using rule 53 (comparison_operator -> LTEQ .)
    TRUE            reduce using rule 53 (comparison_operator -> LTEQ .)
    FALSE           reduce using rule 53 (comparison_operator -> LTEQ .)
    LPAREN          reduce using rule 53 (comparison_operator -> LTEQ .)


state 98

    (54) comparison_operator -> GTEQ .

    ID              reduce using rule 54 (comparison_operator -> GTEQ .)
    NUMBER          reduce using rule 54 (comparison_operator -> GTEQ .)
    STRING          reduce using rule 54 (comparison_operator -> GTEQ .)
    TRUE            reduce using rule 54 (comparison_operator -> GTEQ .)
    FALSE           reduce using rule 54 (comparison_operator -> GTEQ .)
    LPAREN          reduce using rule 54 (comparison_operator -> GTEQ .)


state 99

    (73) try_except -> BEGIN TRY statement_list EXCEPT . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    END             reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 116
    empty                          shift and go to state 3

state 100

    (42) while_stmt -> WHILE LPAREN condition RPAREN . BEGIN statement_list END

    BEGIN           shift and go to state 117


state 101

    (43) function_call -> FUNC ID LPAREN parameter_list . RPAREN BEGIN statement_list RETURN data SEMICOLON END

    RPAREN          shift and go to state 118


state 102

    (44) parameter_list -> type . ID optional_parameter_list

    ID              shift and go to state 119


state 103

    (45) parameter_list -> empty .

    RPAREN          reduce using rule 45 (parameter_list -> empty .)


state 104

    (56) expression_tail -> binary_operator term expression_tail .

    SEMICOLON       reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    RPAREN          reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    RSPAREN         reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    EQEQ            reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    NOTEQ           reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    LT              reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    GT              reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    LTEQ            reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    GTEQ            reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    COMMA           reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    ID              reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    NUMBER          reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    STRING          reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    TRUE            reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    FALSE           reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)
    LPAREN          reduce using rule 56 (expression_tail -> binary_operator term expression_tail .)


state 105

    (21) compound_types -> A ID ASSIGN LPAREN . data RPAREN
    (24) data -> . expression data
    (25) data -> . COMMA data
    (26) data -> . empty
    (55) expression -> . term expression_tail
    (77) empty -> .
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 77 (empty -> .)
    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    data                           shift and go to state 120
    expression                     shift and go to state 108
    empty                          shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 106

    (74) print -> ZOUT LPAREN y RPAREN .

    SEMICOLON       reduce using rule 74 (print -> ZOUT LPAREN y RPAREN .)


state 107

    (16) L -> ID LPAREN data . RPAREN

    RPAREN          shift and go to state 121


state 108

    (24) data -> expression . data
    (24) data -> . expression data
    (25) data -> . COMMA data
    (26) data -> . empty
    (55) expression -> . term expression_tail
    (77) empty -> .
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    expression                     shift and go to state 108
    data                           shift and go to state 122
    empty                          shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 109

    (25) data -> COMMA . data
    (24) data -> . expression data
    (25) data -> . COMMA data
    (26) data -> . empty
    (55) expression -> . term expression_tail
    (77) empty -> .
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 77 (empty -> .)
    SEMICOLON       reduce using rule 77 (empty -> .)
    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    data                           shift and go to state 123
    expression                     shift and go to state 108
    empty                          shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 110

    (26) data -> empty .

    RPAREN          reduce using rule 26 (data -> empty .)
    SEMICOLON       reduce using rule 26 (data -> empty .)


state 111

    (29) F -> CON LPAREN factor . RPAREN

    RPAREN          shift and go to state 124


state 112

    (31) F -> ADD LPAREN factor . RPAREN

    RPAREN          shift and go to state 125


state 113

    (35) F -> SUBSTR LPAREN factor . COMMA factor RPAREN

    COMMA           shift and go to state 126


state 114

    (37) if_stmnt -> IF LPAREN condition RPAREN BEGIN . statement_list END T
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    END             reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 127
    empty                          shift and go to state 3

state 115

    (48) condition -> expression comparison_operator expression .

    RPAREN          reduce using rule 48 (condition -> expression comparison_operator expression .)


state 116

    (73) try_except -> BEGIN TRY statement_list EXCEPT statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    END             shift and go to state 128
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 117

    (42) while_stmt -> WHILE LPAREN condition RPAREN BEGIN . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    END             reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 129
    empty                          shift and go to state 3

state 118

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN . BEGIN statement_list RETURN data SEMICOLON END

    BEGIN           shift and go to state 130


state 119

    (44) parameter_list -> type ID . optional_parameter_list
    (46) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (47) optional_parameter_list -> . empty
    (77) empty -> .

    COMMA           shift and go to state 132
    RPAREN          reduce using rule 77 (empty -> .)

    optional_parameter_list        shift and go to state 131
    empty                          shift and go to state 133

state 120

    (21) compound_types -> A ID ASSIGN LPAREN data . RPAREN

    RPAREN          shift and go to state 134


state 121

    (16) L -> ID LPAREN data RPAREN .

    SEMICOLON       reduce using rule 16 (L -> ID LPAREN data RPAREN .)


state 122

    (24) data -> expression data .

    RPAREN          reduce using rule 24 (data -> expression data .)
    SEMICOLON       reduce using rule 24 (data -> expression data .)


state 123

    (25) data -> COMMA data .

    RPAREN          reduce using rule 25 (data -> COMMA data .)
    SEMICOLON       reduce using rule 25 (data -> COMMA data .)


state 124

    (29) F -> CON LPAREN factor RPAREN .

    SEMICOLON       reduce using rule 29 (F -> CON LPAREN factor RPAREN .)
    RPAREN          reduce using rule 29 (F -> CON LPAREN factor RPAREN .)


state 125

    (31) F -> ADD LPAREN factor RPAREN .

    SEMICOLON       reduce using rule 31 (F -> ADD LPAREN factor RPAREN .)
    RPAREN          reduce using rule 31 (F -> ADD LPAREN factor RPAREN .)


state 126

    (35) F -> SUBSTR LPAREN factor COMMA . factor RPAREN
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    factor                         shift and go to state 135

state 127

    (37) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list . END T
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    END             shift and go to state 136
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 128

    (73) try_except -> BEGIN TRY statement_list EXCEPT statement_list END .

    SEMICOLON       reduce using rule 73 (try_except -> BEGIN TRY statement_list EXCEPT statement_list END .)


state 129

    (42) while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    END             shift and go to state 137
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 130

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN . statement_list RETURN data SEMICOLON END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    RETURN          reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 138
    empty                          shift and go to state 3

state 131

    (44) parameter_list -> type ID optional_parameter_list .

    RPAREN          reduce using rule 44 (parameter_list -> type ID optional_parameter_list .)


state 132

    (46) optional_parameter_list -> COMMA . type ID optional_parameter_list
    (18) type -> . INT
    (19) type -> . BOOL
    (20) type -> . STR

    INT             shift and go to state 34
    BOOL            shift and go to state 35
    STR             shift and go to state 36

    type                           shift and go to state 139

state 133

    (47) optional_parameter_list -> empty .

    RPAREN          reduce using rule 47 (optional_parameter_list -> empty .)


state 134

    (21) compound_types -> A ID ASSIGN LPAREN data RPAREN .

    SEMICOLON       reduce using rule 21 (compound_types -> A ID ASSIGN LPAREN data RPAREN .)


state 135

    (35) F -> SUBSTR LPAREN factor COMMA factor . RPAREN

    RPAREN          shift and go to state 140


state 136

    (37) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END . T
    (38) T -> . ELIF LPAREN condition RPAREN BEGIN statement_list END K
    (39) T -> . empty
    (77) empty -> .

    ELIF            shift and go to state 142
    SEMICOLON       reduce using rule 77 (empty -> .)

    T                              shift and go to state 141
    empty                          shift and go to state 143

state 137

    (42) while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END .

    SEMICOLON       reduce using rule 42 (while_stmt -> WHILE LPAREN condition RPAREN BEGIN statement_list END .)


state 138

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list . RETURN data SEMICOLON END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    RETURN          shift and go to state 144
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 139

    (46) optional_parameter_list -> COMMA type . ID optional_parameter_list

    ID              shift and go to state 145


state 140

    (35) F -> SUBSTR LPAREN factor COMMA factor RPAREN .

    SEMICOLON       reduce using rule 35 (F -> SUBSTR LPAREN factor COMMA factor RPAREN .)
    RPAREN          reduce using rule 35 (F -> SUBSTR LPAREN factor COMMA factor RPAREN .)


state 141

    (37) if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T .

    SEMICOLON       reduce using rule 37 (if_stmnt -> IF LPAREN condition RPAREN BEGIN statement_list END T .)


state 142

    (38) T -> ELIF . LPAREN condition RPAREN BEGIN statement_list END K

    LPAREN          shift and go to state 146


state 143

    (39) T -> empty .

    SEMICOLON       reduce using rule 39 (T -> empty .)


state 144

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN . data SEMICOLON END
    (24) data -> . expression data
    (25) data -> . COMMA data
    (26) data -> . empty
    (55) expression -> . term expression_tail
    (77) empty -> .
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    COMMA           shift and go to state 109
    SEMICOLON       reduce using rule 77 (empty -> .)
    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    data                           shift and go to state 147
    expression                     shift and go to state 108
    empty                          shift and go to state 110
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 145

    (46) optional_parameter_list -> COMMA type ID . optional_parameter_list
    (46) optional_parameter_list -> . COMMA type ID optional_parameter_list
    (47) optional_parameter_list -> . empty
    (77) empty -> .

    COMMA           shift and go to state 132
    RPAREN          reduce using rule 77 (empty -> .)

    optional_parameter_list        shift and go to state 148
    empty                          shift and go to state 133

state 146

    (38) T -> ELIF LPAREN . condition RPAREN BEGIN statement_list END K
    (48) condition -> . expression comparison_operator expression
    (55) expression -> . term expression_tail
    (63) term -> . factor
    (64) term -> . term unary_operator
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 42
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    condition                      shift and go to state 149
    expression                     shift and go to state 75
    term                           shift and go to state 22
    factor                         shift and go to state 25

state 147

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data . SEMICOLON END

    SEMICOLON       shift and go to state 150


state 148

    (46) optional_parameter_list -> COMMA type ID optional_parameter_list .

    RPAREN          reduce using rule 46 (optional_parameter_list -> COMMA type ID optional_parameter_list .)


state 149

    (38) T -> ELIF LPAREN condition . RPAREN BEGIN statement_list END K

    RPAREN          shift and go to state 151


state 150

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON . END

    END             shift and go to state 152


state 151

    (38) T -> ELIF LPAREN condition RPAREN . BEGIN statement_list END K

    BEGIN           shift and go to state 153


state 152

    (43) function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END .

    SEMICOLON       reduce using rule 43 (function_call -> FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END .)


state 153

    (38) T -> ELIF LPAREN condition RPAREN BEGIN . statement_list END K
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    END             reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 154
    empty                          shift and go to state 3

state 154

    (38) T -> ELIF LPAREN condition RPAREN BEGIN statement_list . END K
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    END             shift and go to state 155
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 155

    (38) T -> ELIF LPAREN condition RPAREN BEGIN statement_list END . K
    (40) K -> . ELSE BEGIN statement_list END
    (41) K -> . empty
    (77) empty -> .

    ELSE            shift and go to state 157
    SEMICOLON       reduce using rule 77 (empty -> .)

    K                              shift and go to state 156
    empty                          shift and go to state 158

state 156

    (38) T -> ELIF LPAREN condition RPAREN BEGIN statement_list END K .

    SEMICOLON       reduce using rule 38 (T -> ELIF LPAREN condition RPAREN BEGIN statement_list END K .)


state 157

    (40) K -> ELSE . BEGIN statement_list END

    BEGIN           shift and go to state 159


state 158

    (41) K -> empty .

    SEMICOLON       reduce using rule 41 (K -> empty .)


state 159

    (40) K -> ELSE BEGIN . statement_list END
    (2) statement_list -> . statement_list statement SEMICOLON
    (3) statement_list -> . empty
    (77) empty -> .

    END             reduce using rule 77 (empty -> .)
    VAR             reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    BEGIN           reduce using rule 77 (empty -> .)
    ZOUT            reduce using rule 77 (empty -> .)
    TUPLE           reduce using rule 77 (empty -> .)
    LIST            reduce using rule 77 (empty -> .)
    NUMBER          reduce using rule 77 (empty -> .)
    STRING          reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    LPAREN          reduce using rule 77 (empty -> .)

    statement_list                 shift and go to state 160
    empty                          shift and go to state 3

state 160

    (40) K -> ELSE BEGIN statement_list . END
    (2) statement_list -> statement_list . statement SEMICOLON
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . if_stmnt
    (7) statement -> . while_stmt
    (8) statement -> . function_call
    (9) statement -> . expression
    (10) statement -> . compound_types
    (11) statement -> . compound_type_access
    (12) statement -> . try_except
    (13) statement -> . print
    (14) declaration -> . VAR type assignment
    (17) assignment -> . ID ASSIGN L
    (37) if_stmnt -> . IF LPAREN condition RPAREN BEGIN statement_list END T
    (42) while_stmt -> . WHILE LPAREN condition RPAREN BEGIN statement_list END
    (43) function_call -> . FUNC ID LPAREN parameter_list RPAREN BEGIN statement_list RETURN data SEMICOLON END
    (55) expression -> . term expression_tail
    (21) compound_types -> . A ID ASSIGN LPAREN data RPAREN
    (27) compound_type_access -> . ID DOT F
    (28) compound_type_access -> . ID LSPAREN expression RSPAREN
    (73) try_except -> . BEGIN TRY statement_list EXCEPT statement_list END
    (74) print -> . ZOUT LPAREN y RPAREN
    (63) term -> . factor
    (64) term -> . term unary_operator
    (22) A -> . TUPLE
    (23) A -> . LIST
    (67) factor -> . ID
    (68) factor -> . NUMBER
    (69) factor -> . STRING
    (70) factor -> . TRUE
    (71) factor -> . FALSE
    (72) factor -> . LPAREN expression RPAREN

    END             shift and go to state 161
    VAR             shift and go to state 15
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 20
    FUNC            shift and go to state 21
    BEGIN           shift and go to state 19
    ZOUT            shift and go to state 24
    TUPLE           shift and go to state 26
    LIST            shift and go to state 27
    NUMBER          shift and go to state 28
    STRING          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    LPAREN          shift and go to state 18

    statement                      shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    if_stmnt                       shift and go to state 7
    while_stmt                     shift and go to state 8
    function_call                  shift and go to state 9
    expression                     shift and go to state 10
    compound_types                 shift and go to state 11
    compound_type_access           shift and go to state 12
    try_except                     shift and go to state 13
    print                          shift and go to state 14
    term                           shift and go to state 22
    A                              shift and go to state 23
    factor                         shift and go to state 25

state 161

    (40) K -> ELSE BEGIN statement_list END .

    SEMICOLON       reduce using rule 40 (K -> ELSE BEGIN statement_list END .)

